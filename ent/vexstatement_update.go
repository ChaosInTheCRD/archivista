// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/in-toto/archivista/ent/predicate"
	"github.com/in-toto/archivista/ent/vexdocument"
	"github.com/in-toto/archivista/ent/vexstatement"
)

// VexStatementUpdate is the builder for updating VexStatement entities.
type VexStatementUpdate struct {
	config
	hooks    []Hook
	mutation *VexStatementMutation
}

// Where appends a list predicates to the VexStatementUpdate builder.
func (vsu *VexStatementUpdate) Where(ps ...predicate.VexStatement) *VexStatementUpdate {
	vsu.mutation.Where(ps...)
	return vsu
}

// SetVexID sets the "vex_id" field.
func (vsu *VexStatementUpdate) SetVexID(s string) *VexStatementUpdate {
	vsu.mutation.SetVexID(s)
	return vsu
}

// SetNillableVexID sets the "vex_id" field if the given value is not nil.
func (vsu *VexStatementUpdate) SetNillableVexID(s *string) *VexStatementUpdate {
	if s != nil {
		vsu.SetVexID(*s)
	}
	return vsu
}

// SetVulnID sets the "vuln_id" field.
func (vsu *VexStatementUpdate) SetVulnID(s string) *VexStatementUpdate {
	vsu.mutation.SetVulnID(s)
	return vsu
}

// SetNillableVulnID sets the "vuln_id" field if the given value is not nil.
func (vsu *VexStatementUpdate) SetNillableVulnID(s *string) *VexStatementUpdate {
	if s != nil {
		vsu.SetVulnID(*s)
	}
	return vsu
}

// SetVexDocumentID sets the "vex_document" edge to the VexDocument entity by ID.
func (vsu *VexStatementUpdate) SetVexDocumentID(id int) *VexStatementUpdate {
	vsu.mutation.SetVexDocumentID(id)
	return vsu
}

// SetVexDocument sets the "vex_document" edge to the VexDocument entity.
func (vsu *VexStatementUpdate) SetVexDocument(v *VexDocument) *VexStatementUpdate {
	return vsu.SetVexDocumentID(v.ID)
}

// Mutation returns the VexStatementMutation object of the builder.
func (vsu *VexStatementUpdate) Mutation() *VexStatementMutation {
	return vsu.mutation
}

// ClearVexDocument clears the "vex_document" edge to the VexDocument entity.
func (vsu *VexStatementUpdate) ClearVexDocument() *VexStatementUpdate {
	vsu.mutation.ClearVexDocument()
	return vsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vsu *VexStatementUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vsu.sqlSave, vsu.mutation, vsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vsu *VexStatementUpdate) SaveX(ctx context.Context) int {
	affected, err := vsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vsu *VexStatementUpdate) Exec(ctx context.Context) error {
	_, err := vsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vsu *VexStatementUpdate) ExecX(ctx context.Context) {
	if err := vsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vsu *VexStatementUpdate) check() error {
	if v, ok := vsu.mutation.VexID(); ok {
		if err := vexstatement.VexIDValidator(v); err != nil {
			return &ValidationError{Name: "vex_id", err: fmt.Errorf(`ent: validator failed for field "VexStatement.vex_id": %w`, err)}
		}
	}
	if v, ok := vsu.mutation.VulnID(); ok {
		if err := vexstatement.VulnIDValidator(v); err != nil {
			return &ValidationError{Name: "vuln_id", err: fmt.Errorf(`ent: validator failed for field "VexStatement.vuln_id": %w`, err)}
		}
	}
	if _, ok := vsu.mutation.VexDocumentID(); vsu.mutation.VexDocumentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "VexStatement.vex_document"`)
	}
	return nil
}

func (vsu *VexStatementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(vexstatement.Table, vexstatement.Columns, sqlgraph.NewFieldSpec(vexstatement.FieldID, field.TypeInt))
	if ps := vsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vsu.mutation.VexID(); ok {
		_spec.SetField(vexstatement.FieldVexID, field.TypeString, value)
	}
	if value, ok := vsu.mutation.VulnID(); ok {
		_spec.SetField(vexstatement.FieldVulnID, field.TypeString, value)
	}
	if vsu.mutation.VexDocumentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   vexstatement.VexDocumentTable,
			Columns: []string{vexstatement.VexDocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vexdocument.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vsu.mutation.VexDocumentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   vexstatement.VexDocumentTable,
			Columns: []string{vexstatement.VexDocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vexdocument.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vexstatement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vsu.mutation.done = true
	return n, nil
}

// VexStatementUpdateOne is the builder for updating a single VexStatement entity.
type VexStatementUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VexStatementMutation
}

// SetVexID sets the "vex_id" field.
func (vsuo *VexStatementUpdateOne) SetVexID(s string) *VexStatementUpdateOne {
	vsuo.mutation.SetVexID(s)
	return vsuo
}

// SetNillableVexID sets the "vex_id" field if the given value is not nil.
func (vsuo *VexStatementUpdateOne) SetNillableVexID(s *string) *VexStatementUpdateOne {
	if s != nil {
		vsuo.SetVexID(*s)
	}
	return vsuo
}

// SetVulnID sets the "vuln_id" field.
func (vsuo *VexStatementUpdateOne) SetVulnID(s string) *VexStatementUpdateOne {
	vsuo.mutation.SetVulnID(s)
	return vsuo
}

// SetNillableVulnID sets the "vuln_id" field if the given value is not nil.
func (vsuo *VexStatementUpdateOne) SetNillableVulnID(s *string) *VexStatementUpdateOne {
	if s != nil {
		vsuo.SetVulnID(*s)
	}
	return vsuo
}

// SetVexDocumentID sets the "vex_document" edge to the VexDocument entity by ID.
func (vsuo *VexStatementUpdateOne) SetVexDocumentID(id int) *VexStatementUpdateOne {
	vsuo.mutation.SetVexDocumentID(id)
	return vsuo
}

// SetVexDocument sets the "vex_document" edge to the VexDocument entity.
func (vsuo *VexStatementUpdateOne) SetVexDocument(v *VexDocument) *VexStatementUpdateOne {
	return vsuo.SetVexDocumentID(v.ID)
}

// Mutation returns the VexStatementMutation object of the builder.
func (vsuo *VexStatementUpdateOne) Mutation() *VexStatementMutation {
	return vsuo.mutation
}

// ClearVexDocument clears the "vex_document" edge to the VexDocument entity.
func (vsuo *VexStatementUpdateOne) ClearVexDocument() *VexStatementUpdateOne {
	vsuo.mutation.ClearVexDocument()
	return vsuo
}

// Where appends a list predicates to the VexStatementUpdate builder.
func (vsuo *VexStatementUpdateOne) Where(ps ...predicate.VexStatement) *VexStatementUpdateOne {
	vsuo.mutation.Where(ps...)
	return vsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vsuo *VexStatementUpdateOne) Select(field string, fields ...string) *VexStatementUpdateOne {
	vsuo.fields = append([]string{field}, fields...)
	return vsuo
}

// Save executes the query and returns the updated VexStatement entity.
func (vsuo *VexStatementUpdateOne) Save(ctx context.Context) (*VexStatement, error) {
	return withHooks(ctx, vsuo.sqlSave, vsuo.mutation, vsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vsuo *VexStatementUpdateOne) SaveX(ctx context.Context) *VexStatement {
	node, err := vsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vsuo *VexStatementUpdateOne) Exec(ctx context.Context) error {
	_, err := vsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vsuo *VexStatementUpdateOne) ExecX(ctx context.Context) {
	if err := vsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vsuo *VexStatementUpdateOne) check() error {
	if v, ok := vsuo.mutation.VexID(); ok {
		if err := vexstatement.VexIDValidator(v); err != nil {
			return &ValidationError{Name: "vex_id", err: fmt.Errorf(`ent: validator failed for field "VexStatement.vex_id": %w`, err)}
		}
	}
	if v, ok := vsuo.mutation.VulnID(); ok {
		if err := vexstatement.VulnIDValidator(v); err != nil {
			return &ValidationError{Name: "vuln_id", err: fmt.Errorf(`ent: validator failed for field "VexStatement.vuln_id": %w`, err)}
		}
	}
	if _, ok := vsuo.mutation.VexDocumentID(); vsuo.mutation.VexDocumentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "VexStatement.vex_document"`)
	}
	return nil
}

func (vsuo *VexStatementUpdateOne) sqlSave(ctx context.Context) (_node *VexStatement, err error) {
	if err := vsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vexstatement.Table, vexstatement.Columns, sqlgraph.NewFieldSpec(vexstatement.FieldID, field.TypeInt))
	id, ok := vsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VexStatement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vexstatement.FieldID)
		for _, f := range fields {
			if !vexstatement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vexstatement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vsuo.mutation.VexID(); ok {
		_spec.SetField(vexstatement.FieldVexID, field.TypeString, value)
	}
	if value, ok := vsuo.mutation.VulnID(); ok {
		_spec.SetField(vexstatement.FieldVulnID, field.TypeString, value)
	}
	if vsuo.mutation.VexDocumentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   vexstatement.VexDocumentTable,
			Columns: []string{vexstatement.VexDocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vexdocument.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vsuo.mutation.VexDocumentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   vexstatement.VexDocumentTable,
			Columns: []string{vexstatement.VexDocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vexdocument.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &VexStatement{config: vsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vexstatement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vsuo.mutation.done = true
	return _node, nil
}
