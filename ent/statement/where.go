// Code generated by entc, DO NOT EDIT.

package statement

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/testifysec/archivist/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Statement applies equality check predicate on the "statement" field. It's identical to StatementEQ.
func Statement(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatement), v))
	})
}

// StatementEQ applies the EQ predicate on the "statement" field.
func StatementEQ(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatement), v))
	})
}

// StatementNEQ applies the NEQ predicate on the "statement" field.
func StatementNEQ(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatement), v))
	})
}

// StatementIn applies the In predicate on the "statement" field.
func StatementIn(vs ...string) predicate.Statement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Statement(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatement), v...))
	})
}

// StatementNotIn applies the NotIn predicate on the "statement" field.
func StatementNotIn(vs ...string) predicate.Statement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Statement(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatement), v...))
	})
}

// StatementGT applies the GT predicate on the "statement" field.
func StatementGT(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatement), v))
	})
}

// StatementGTE applies the GTE predicate on the "statement" field.
func StatementGTE(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatement), v))
	})
}

// StatementLT applies the LT predicate on the "statement" field.
func StatementLT(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatement), v))
	})
}

// StatementLTE applies the LTE predicate on the "statement" field.
func StatementLTE(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatement), v))
	})
}

// StatementContains applies the Contains predicate on the "statement" field.
func StatementContains(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStatement), v))
	})
}

// StatementHasPrefix applies the HasPrefix predicate on the "statement" field.
func StatementHasPrefix(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStatement), v))
	})
}

// StatementHasSuffix applies the HasSuffix predicate on the "statement" field.
func StatementHasSuffix(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStatement), v))
	})
}

// StatementEqualFold applies the EqualFold predicate on the "statement" field.
func StatementEqualFold(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStatement), v))
	})
}

// StatementContainsFold applies the ContainsFold predicate on the "statement" field.
func StatementContainsFold(v string) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStatement), v))
	})
}

// HasSubjects applies the HasEdge predicate on the "subjects" edge.
func HasSubjects() predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SubjectsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, SubjectsTable, SubjectsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubjectsWith applies the HasEdge predicate on the "subjects" edge with a given conditions (other predicates).
func HasSubjectsWith(preds ...predicate.Subject) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SubjectsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, SubjectsTable, SubjectsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Statement) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Statement) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Statement) predicate.Statement {
	return predicate.Statement(func(s *sql.Selector) {
		p(s.Not())
	})
}
