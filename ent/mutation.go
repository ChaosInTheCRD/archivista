// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/testifysec/archivist/ent/attestation"
	"github.com/testifysec/archivist/ent/attestationcollection"
	"github.com/testifysec/archivist/ent/digest"
	"github.com/testifysec/archivist/ent/dsse"
	"github.com/testifysec/archivist/ent/predicate"
	"github.com/testifysec/archivist/ent/signature"
	"github.com/testifysec/archivist/ent/statement"
	"github.com/testifysec/archivist/ent/subject"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAttestation           = "Attestation"
	TypeAttestationCollection = "AttestationCollection"
	TypeDigest                = "Digest"
	TypeDsse                  = "Dsse"
	TypeSignature             = "Signature"
	TypeStatement             = "Statement"
	TypeSubject               = "Subject"
)

// AttestationMutation represents an operation that mutates the Attestation nodes in the graph.
type AttestationMutation struct {
	config
	op                            Op
	typ                           string
	id                            *int
	_type                         *string
	clearedFields                 map[string]struct{}
	attestation_collection        *int
	clearedattestation_collection bool
	done                          bool
	oldValue                      func(context.Context) (*Attestation, error)
	predicates                    []predicate.Attestation
}

var _ ent.Mutation = (*AttestationMutation)(nil)

// attestationOption allows management of the mutation configuration using functional options.
type attestationOption func(*AttestationMutation)

// newAttestationMutation creates new mutation for the Attestation entity.
func newAttestationMutation(c config, op Op, opts ...attestationOption) *AttestationMutation {
	m := &AttestationMutation{
		config:        c,
		op:            op,
		typ:           TypeAttestation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAttestationID sets the ID field of the mutation.
func withAttestationID(id int) attestationOption {
	return func(m *AttestationMutation) {
		var (
			err   error
			once  sync.Once
			value *Attestation
		)
		m.oldValue = func(ctx context.Context) (*Attestation, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Attestation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAttestation sets the old Attestation of the mutation.
func withAttestation(node *Attestation) attestationOption {
	return func(m *AttestationMutation) {
		m.oldValue = func(context.Context) (*Attestation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AttestationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AttestationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AttestationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AttestationMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Attestation.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetType sets the "type" field.
func (m *AttestationMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *AttestationMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Attestation entity.
// If the Attestation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttestationMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *AttestationMutation) ResetType() {
	m._type = nil
}

// SetAttestationCollectionID sets the "attestation_collection" edge to the AttestationCollection entity by id.
func (m *AttestationMutation) SetAttestationCollectionID(id int) {
	m.attestation_collection = &id
}

// ClearAttestationCollection clears the "attestation_collection" edge to the AttestationCollection entity.
func (m *AttestationMutation) ClearAttestationCollection() {
	m.clearedattestation_collection = true
}

// AttestationCollectionCleared reports if the "attestation_collection" edge to the AttestationCollection entity was cleared.
func (m *AttestationMutation) AttestationCollectionCleared() bool {
	return m.clearedattestation_collection
}

// AttestationCollectionID returns the "attestation_collection" edge ID in the mutation.
func (m *AttestationMutation) AttestationCollectionID() (id int, exists bool) {
	if m.attestation_collection != nil {
		return *m.attestation_collection, true
	}
	return
}

// AttestationCollectionIDs returns the "attestation_collection" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AttestationCollectionID instead. It exists only for internal usage by the builders.
func (m *AttestationMutation) AttestationCollectionIDs() (ids []int) {
	if id := m.attestation_collection; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAttestationCollection resets all changes to the "attestation_collection" edge.
func (m *AttestationMutation) ResetAttestationCollection() {
	m.attestation_collection = nil
	m.clearedattestation_collection = false
}

// Where appends a list predicates to the AttestationMutation builder.
func (m *AttestationMutation) Where(ps ...predicate.Attestation) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AttestationMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Attestation).
func (m *AttestationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AttestationMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._type != nil {
		fields = append(fields, attestation.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AttestationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case attestation.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AttestationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case attestation.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown Attestation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttestationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case attestation.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown Attestation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AttestationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AttestationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttestationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Attestation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AttestationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AttestationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AttestationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Attestation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AttestationMutation) ResetField(name string) error {
	switch name {
	case attestation.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown Attestation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AttestationMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.attestation_collection != nil {
		edges = append(edges, attestation.EdgeAttestationCollection)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AttestationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case attestation.EdgeAttestationCollection:
		if id := m.attestation_collection; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AttestationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AttestationMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AttestationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedattestation_collection {
		edges = append(edges, attestation.EdgeAttestationCollection)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AttestationMutation) EdgeCleared(name string) bool {
	switch name {
	case attestation.EdgeAttestationCollection:
		return m.clearedattestation_collection
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AttestationMutation) ClearEdge(name string) error {
	switch name {
	case attestation.EdgeAttestationCollection:
		m.ClearAttestationCollection()
		return nil
	}
	return fmt.Errorf("unknown Attestation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AttestationMutation) ResetEdge(name string) error {
	switch name {
	case attestation.EdgeAttestationCollection:
		m.ResetAttestationCollection()
		return nil
	}
	return fmt.Errorf("unknown Attestation edge %s", name)
}

// AttestationCollectionMutation represents an operation that mutates the AttestationCollection nodes in the graph.
type AttestationCollectionMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	name                *string
	clearedFields       map[string]struct{}
	attestations        map[int]struct{}
	removedattestations map[int]struct{}
	clearedattestations bool
	statement           *int
	clearedstatement    bool
	done                bool
	oldValue            func(context.Context) (*AttestationCollection, error)
	predicates          []predicate.AttestationCollection
}

var _ ent.Mutation = (*AttestationCollectionMutation)(nil)

// attestationcollectionOption allows management of the mutation configuration using functional options.
type attestationcollectionOption func(*AttestationCollectionMutation)

// newAttestationCollectionMutation creates new mutation for the AttestationCollection entity.
func newAttestationCollectionMutation(c config, op Op, opts ...attestationcollectionOption) *AttestationCollectionMutation {
	m := &AttestationCollectionMutation{
		config:        c,
		op:            op,
		typ:           TypeAttestationCollection,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAttestationCollectionID sets the ID field of the mutation.
func withAttestationCollectionID(id int) attestationcollectionOption {
	return func(m *AttestationCollectionMutation) {
		var (
			err   error
			once  sync.Once
			value *AttestationCollection
		)
		m.oldValue = func(ctx context.Context) (*AttestationCollection, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AttestationCollection.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAttestationCollection sets the old AttestationCollection of the mutation.
func withAttestationCollection(node *AttestationCollection) attestationcollectionOption {
	return func(m *AttestationCollectionMutation) {
		m.oldValue = func(context.Context) (*AttestationCollection, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AttestationCollectionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AttestationCollectionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AttestationCollectionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AttestationCollectionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AttestationCollection.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *AttestationCollectionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AttestationCollectionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the AttestationCollection entity.
// If the AttestationCollection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttestationCollectionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *AttestationCollectionMutation) ResetName() {
	m.name = nil
}

// AddAttestationIDs adds the "attestations" edge to the Attestation entity by ids.
func (m *AttestationCollectionMutation) AddAttestationIDs(ids ...int) {
	if m.attestations == nil {
		m.attestations = make(map[int]struct{})
	}
	for i := range ids {
		m.attestations[ids[i]] = struct{}{}
	}
}

// ClearAttestations clears the "attestations" edge to the Attestation entity.
func (m *AttestationCollectionMutation) ClearAttestations() {
	m.clearedattestations = true
}

// AttestationsCleared reports if the "attestations" edge to the Attestation entity was cleared.
func (m *AttestationCollectionMutation) AttestationsCleared() bool {
	return m.clearedattestations
}

// RemoveAttestationIDs removes the "attestations" edge to the Attestation entity by IDs.
func (m *AttestationCollectionMutation) RemoveAttestationIDs(ids ...int) {
	if m.removedattestations == nil {
		m.removedattestations = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.attestations, ids[i])
		m.removedattestations[ids[i]] = struct{}{}
	}
}

// RemovedAttestations returns the removed IDs of the "attestations" edge to the Attestation entity.
func (m *AttestationCollectionMutation) RemovedAttestationsIDs() (ids []int) {
	for id := range m.removedattestations {
		ids = append(ids, id)
	}
	return
}

// AttestationsIDs returns the "attestations" edge IDs in the mutation.
func (m *AttestationCollectionMutation) AttestationsIDs() (ids []int) {
	for id := range m.attestations {
		ids = append(ids, id)
	}
	return
}

// ResetAttestations resets all changes to the "attestations" edge.
func (m *AttestationCollectionMutation) ResetAttestations() {
	m.attestations = nil
	m.clearedattestations = false
	m.removedattestations = nil
}

// SetStatementID sets the "statement" edge to the Statement entity by id.
func (m *AttestationCollectionMutation) SetStatementID(id int) {
	m.statement = &id
}

// ClearStatement clears the "statement" edge to the Statement entity.
func (m *AttestationCollectionMutation) ClearStatement() {
	m.clearedstatement = true
}

// StatementCleared reports if the "statement" edge to the Statement entity was cleared.
func (m *AttestationCollectionMutation) StatementCleared() bool {
	return m.clearedstatement
}

// StatementID returns the "statement" edge ID in the mutation.
func (m *AttestationCollectionMutation) StatementID() (id int, exists bool) {
	if m.statement != nil {
		return *m.statement, true
	}
	return
}

// StatementIDs returns the "statement" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StatementID instead. It exists only for internal usage by the builders.
func (m *AttestationCollectionMutation) StatementIDs() (ids []int) {
	if id := m.statement; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStatement resets all changes to the "statement" edge.
func (m *AttestationCollectionMutation) ResetStatement() {
	m.statement = nil
	m.clearedstatement = false
}

// Where appends a list predicates to the AttestationCollectionMutation builder.
func (m *AttestationCollectionMutation) Where(ps ...predicate.AttestationCollection) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AttestationCollectionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (AttestationCollection).
func (m *AttestationCollectionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AttestationCollectionMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, attestationcollection.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AttestationCollectionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case attestationcollection.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AttestationCollectionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case attestationcollection.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown AttestationCollection field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttestationCollectionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case attestationcollection.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown AttestationCollection field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AttestationCollectionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AttestationCollectionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttestationCollectionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown AttestationCollection numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AttestationCollectionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AttestationCollectionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AttestationCollectionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AttestationCollection nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AttestationCollectionMutation) ResetField(name string) error {
	switch name {
	case attestationcollection.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown AttestationCollection field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AttestationCollectionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.attestations != nil {
		edges = append(edges, attestationcollection.EdgeAttestations)
	}
	if m.statement != nil {
		edges = append(edges, attestationcollection.EdgeStatement)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AttestationCollectionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case attestationcollection.EdgeAttestations:
		ids := make([]ent.Value, 0, len(m.attestations))
		for id := range m.attestations {
			ids = append(ids, id)
		}
		return ids
	case attestationcollection.EdgeStatement:
		if id := m.statement; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AttestationCollectionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedattestations != nil {
		edges = append(edges, attestationcollection.EdgeAttestations)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AttestationCollectionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case attestationcollection.EdgeAttestations:
		ids := make([]ent.Value, 0, len(m.removedattestations))
		for id := range m.removedattestations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AttestationCollectionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedattestations {
		edges = append(edges, attestationcollection.EdgeAttestations)
	}
	if m.clearedstatement {
		edges = append(edges, attestationcollection.EdgeStatement)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AttestationCollectionMutation) EdgeCleared(name string) bool {
	switch name {
	case attestationcollection.EdgeAttestations:
		return m.clearedattestations
	case attestationcollection.EdgeStatement:
		return m.clearedstatement
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AttestationCollectionMutation) ClearEdge(name string) error {
	switch name {
	case attestationcollection.EdgeStatement:
		m.ClearStatement()
		return nil
	}
	return fmt.Errorf("unknown AttestationCollection unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AttestationCollectionMutation) ResetEdge(name string) error {
	switch name {
	case attestationcollection.EdgeAttestations:
		m.ResetAttestations()
		return nil
	case attestationcollection.EdgeStatement:
		m.ResetStatement()
		return nil
	}
	return fmt.Errorf("unknown AttestationCollection edge %s", name)
}

// DigestMutation represents an operation that mutates the Digest nodes in the graph.
type DigestMutation struct {
	config
	op             Op
	typ            string
	id             *int
	algorithm      *string
	value          *string
	clearedFields  map[string]struct{}
	subject        *int
	clearedsubject bool
	done           bool
	oldValue       func(context.Context) (*Digest, error)
	predicates     []predicate.Digest
}

var _ ent.Mutation = (*DigestMutation)(nil)

// digestOption allows management of the mutation configuration using functional options.
type digestOption func(*DigestMutation)

// newDigestMutation creates new mutation for the Digest entity.
func newDigestMutation(c config, op Op, opts ...digestOption) *DigestMutation {
	m := &DigestMutation{
		config:        c,
		op:            op,
		typ:           TypeDigest,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDigestID sets the ID field of the mutation.
func withDigestID(id int) digestOption {
	return func(m *DigestMutation) {
		var (
			err   error
			once  sync.Once
			value *Digest
		)
		m.oldValue = func(ctx context.Context) (*Digest, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Digest.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDigest sets the old Digest of the mutation.
func withDigest(node *Digest) digestOption {
	return func(m *DigestMutation) {
		m.oldValue = func(context.Context) (*Digest, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DigestMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DigestMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DigestMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DigestMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Digest.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAlgorithm sets the "algorithm" field.
func (m *DigestMutation) SetAlgorithm(s string) {
	m.algorithm = &s
}

// Algorithm returns the value of the "algorithm" field in the mutation.
func (m *DigestMutation) Algorithm() (r string, exists bool) {
	v := m.algorithm
	if v == nil {
		return
	}
	return *v, true
}

// OldAlgorithm returns the old "algorithm" field's value of the Digest entity.
// If the Digest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DigestMutation) OldAlgorithm(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAlgorithm is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAlgorithm requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAlgorithm: %w", err)
	}
	return oldValue.Algorithm, nil
}

// ResetAlgorithm resets all changes to the "algorithm" field.
func (m *DigestMutation) ResetAlgorithm() {
	m.algorithm = nil
}

// SetValue sets the "value" field.
func (m *DigestMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *DigestMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the Digest entity.
// If the Digest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DigestMutation) OldValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ResetValue resets all changes to the "value" field.
func (m *DigestMutation) ResetValue() {
	m.value = nil
}

// SetSubjectID sets the "subject" edge to the Subject entity by id.
func (m *DigestMutation) SetSubjectID(id int) {
	m.subject = &id
}

// ClearSubject clears the "subject" edge to the Subject entity.
func (m *DigestMutation) ClearSubject() {
	m.clearedsubject = true
}

// SubjectCleared reports if the "subject" edge to the Subject entity was cleared.
func (m *DigestMutation) SubjectCleared() bool {
	return m.clearedsubject
}

// SubjectID returns the "subject" edge ID in the mutation.
func (m *DigestMutation) SubjectID() (id int, exists bool) {
	if m.subject != nil {
		return *m.subject, true
	}
	return
}

// SubjectIDs returns the "subject" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SubjectID instead. It exists only for internal usage by the builders.
func (m *DigestMutation) SubjectIDs() (ids []int) {
	if id := m.subject; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSubject resets all changes to the "subject" edge.
func (m *DigestMutation) ResetSubject() {
	m.subject = nil
	m.clearedsubject = false
}

// Where appends a list predicates to the DigestMutation builder.
func (m *DigestMutation) Where(ps ...predicate.Digest) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DigestMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Digest).
func (m *DigestMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DigestMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.algorithm != nil {
		fields = append(fields, digest.FieldAlgorithm)
	}
	if m.value != nil {
		fields = append(fields, digest.FieldValue)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DigestMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case digest.FieldAlgorithm:
		return m.Algorithm()
	case digest.FieldValue:
		return m.Value()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DigestMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case digest.FieldAlgorithm:
		return m.OldAlgorithm(ctx)
	case digest.FieldValue:
		return m.OldValue(ctx)
	}
	return nil, fmt.Errorf("unknown Digest field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DigestMutation) SetField(name string, value ent.Value) error {
	switch name {
	case digest.FieldAlgorithm:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAlgorithm(v)
		return nil
	case digest.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	}
	return fmt.Errorf("unknown Digest field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DigestMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DigestMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DigestMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Digest numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DigestMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DigestMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DigestMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Digest nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DigestMutation) ResetField(name string) error {
	switch name {
	case digest.FieldAlgorithm:
		m.ResetAlgorithm()
		return nil
	case digest.FieldValue:
		m.ResetValue()
		return nil
	}
	return fmt.Errorf("unknown Digest field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DigestMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.subject != nil {
		edges = append(edges, digest.EdgeSubject)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DigestMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case digest.EdgeSubject:
		if id := m.subject; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DigestMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DigestMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DigestMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedsubject {
		edges = append(edges, digest.EdgeSubject)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DigestMutation) EdgeCleared(name string) bool {
	switch name {
	case digest.EdgeSubject:
		return m.clearedsubject
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DigestMutation) ClearEdge(name string) error {
	switch name {
	case digest.EdgeSubject:
		m.ClearSubject()
		return nil
	}
	return fmt.Errorf("unknown Digest unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DigestMutation) ResetEdge(name string) error {
	switch name {
	case digest.EdgeSubject:
		m.ResetSubject()
		return nil
	}
	return fmt.Errorf("unknown Digest edge %s", name)
}

// DsseMutation represents an operation that mutates the Dsse nodes in the graph.
type DsseMutation struct {
	config
	op                Op
	typ               string
	id                *int
	gitbom_sha256     *string
	payload_type      *string
	clearedFields     map[string]struct{}
	statement         *int
	clearedstatement  bool
	signatures        map[int]struct{}
	removedsignatures map[int]struct{}
	clearedsignatures bool
	done              bool
	oldValue          func(context.Context) (*Dsse, error)
	predicates        []predicate.Dsse
}

var _ ent.Mutation = (*DsseMutation)(nil)

// dsseOption allows management of the mutation configuration using functional options.
type dsseOption func(*DsseMutation)

// newDsseMutation creates new mutation for the Dsse entity.
func newDsseMutation(c config, op Op, opts ...dsseOption) *DsseMutation {
	m := &DsseMutation{
		config:        c,
		op:            op,
		typ:           TypeDsse,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDsseID sets the ID field of the mutation.
func withDsseID(id int) dsseOption {
	return func(m *DsseMutation) {
		var (
			err   error
			once  sync.Once
			value *Dsse
		)
		m.oldValue = func(ctx context.Context) (*Dsse, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Dsse.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDsse sets the old Dsse of the mutation.
func withDsse(node *Dsse) dsseOption {
	return func(m *DsseMutation) {
		m.oldValue = func(context.Context) (*Dsse, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DsseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DsseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DsseMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DsseMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Dsse.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetGitbomSha256 sets the "gitbom_sha256" field.
func (m *DsseMutation) SetGitbomSha256(s string) {
	m.gitbom_sha256 = &s
}

// GitbomSha256 returns the value of the "gitbom_sha256" field in the mutation.
func (m *DsseMutation) GitbomSha256() (r string, exists bool) {
	v := m.gitbom_sha256
	if v == nil {
		return
	}
	return *v, true
}

// OldGitbomSha256 returns the old "gitbom_sha256" field's value of the Dsse entity.
// If the Dsse object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DsseMutation) OldGitbomSha256(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGitbomSha256 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGitbomSha256 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGitbomSha256: %w", err)
	}
	return oldValue.GitbomSha256, nil
}

// ResetGitbomSha256 resets all changes to the "gitbom_sha256" field.
func (m *DsseMutation) ResetGitbomSha256() {
	m.gitbom_sha256 = nil
}

// SetPayloadType sets the "payload_type" field.
func (m *DsseMutation) SetPayloadType(s string) {
	m.payload_type = &s
}

// PayloadType returns the value of the "payload_type" field in the mutation.
func (m *DsseMutation) PayloadType() (r string, exists bool) {
	v := m.payload_type
	if v == nil {
		return
	}
	return *v, true
}

// OldPayloadType returns the old "payload_type" field's value of the Dsse entity.
// If the Dsse object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DsseMutation) OldPayloadType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPayloadType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPayloadType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPayloadType: %w", err)
	}
	return oldValue.PayloadType, nil
}

// ResetPayloadType resets all changes to the "payload_type" field.
func (m *DsseMutation) ResetPayloadType() {
	m.payload_type = nil
}

// SetStatementID sets the "statement" edge to the Statement entity by id.
func (m *DsseMutation) SetStatementID(id int) {
	m.statement = &id
}

// ClearStatement clears the "statement" edge to the Statement entity.
func (m *DsseMutation) ClearStatement() {
	m.clearedstatement = true
}

// StatementCleared reports if the "statement" edge to the Statement entity was cleared.
func (m *DsseMutation) StatementCleared() bool {
	return m.clearedstatement
}

// StatementID returns the "statement" edge ID in the mutation.
func (m *DsseMutation) StatementID() (id int, exists bool) {
	if m.statement != nil {
		return *m.statement, true
	}
	return
}

// StatementIDs returns the "statement" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StatementID instead. It exists only for internal usage by the builders.
func (m *DsseMutation) StatementIDs() (ids []int) {
	if id := m.statement; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStatement resets all changes to the "statement" edge.
func (m *DsseMutation) ResetStatement() {
	m.statement = nil
	m.clearedstatement = false
}

// AddSignatureIDs adds the "signatures" edge to the Signature entity by ids.
func (m *DsseMutation) AddSignatureIDs(ids ...int) {
	if m.signatures == nil {
		m.signatures = make(map[int]struct{})
	}
	for i := range ids {
		m.signatures[ids[i]] = struct{}{}
	}
}

// ClearSignatures clears the "signatures" edge to the Signature entity.
func (m *DsseMutation) ClearSignatures() {
	m.clearedsignatures = true
}

// SignaturesCleared reports if the "signatures" edge to the Signature entity was cleared.
func (m *DsseMutation) SignaturesCleared() bool {
	return m.clearedsignatures
}

// RemoveSignatureIDs removes the "signatures" edge to the Signature entity by IDs.
func (m *DsseMutation) RemoveSignatureIDs(ids ...int) {
	if m.removedsignatures == nil {
		m.removedsignatures = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.signatures, ids[i])
		m.removedsignatures[ids[i]] = struct{}{}
	}
}

// RemovedSignatures returns the removed IDs of the "signatures" edge to the Signature entity.
func (m *DsseMutation) RemovedSignaturesIDs() (ids []int) {
	for id := range m.removedsignatures {
		ids = append(ids, id)
	}
	return
}

// SignaturesIDs returns the "signatures" edge IDs in the mutation.
func (m *DsseMutation) SignaturesIDs() (ids []int) {
	for id := range m.signatures {
		ids = append(ids, id)
	}
	return
}

// ResetSignatures resets all changes to the "signatures" edge.
func (m *DsseMutation) ResetSignatures() {
	m.signatures = nil
	m.clearedsignatures = false
	m.removedsignatures = nil
}

// Where appends a list predicates to the DsseMutation builder.
func (m *DsseMutation) Where(ps ...predicate.Dsse) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DsseMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Dsse).
func (m *DsseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DsseMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.gitbom_sha256 != nil {
		fields = append(fields, dsse.FieldGitbomSha256)
	}
	if m.payload_type != nil {
		fields = append(fields, dsse.FieldPayloadType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DsseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case dsse.FieldGitbomSha256:
		return m.GitbomSha256()
	case dsse.FieldPayloadType:
		return m.PayloadType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DsseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case dsse.FieldGitbomSha256:
		return m.OldGitbomSha256(ctx)
	case dsse.FieldPayloadType:
		return m.OldPayloadType(ctx)
	}
	return nil, fmt.Errorf("unknown Dsse field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DsseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case dsse.FieldGitbomSha256:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGitbomSha256(v)
		return nil
	case dsse.FieldPayloadType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPayloadType(v)
		return nil
	}
	return fmt.Errorf("unknown Dsse field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DsseMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DsseMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DsseMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Dsse numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DsseMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DsseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DsseMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Dsse nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DsseMutation) ResetField(name string) error {
	switch name {
	case dsse.FieldGitbomSha256:
		m.ResetGitbomSha256()
		return nil
	case dsse.FieldPayloadType:
		m.ResetPayloadType()
		return nil
	}
	return fmt.Errorf("unknown Dsse field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DsseMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.statement != nil {
		edges = append(edges, dsse.EdgeStatement)
	}
	if m.signatures != nil {
		edges = append(edges, dsse.EdgeSignatures)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DsseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case dsse.EdgeStatement:
		if id := m.statement; id != nil {
			return []ent.Value{*id}
		}
	case dsse.EdgeSignatures:
		ids := make([]ent.Value, 0, len(m.signatures))
		for id := range m.signatures {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DsseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedsignatures != nil {
		edges = append(edges, dsse.EdgeSignatures)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DsseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case dsse.EdgeSignatures:
		ids := make([]ent.Value, 0, len(m.removedsignatures))
		for id := range m.removedsignatures {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DsseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedstatement {
		edges = append(edges, dsse.EdgeStatement)
	}
	if m.clearedsignatures {
		edges = append(edges, dsse.EdgeSignatures)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DsseMutation) EdgeCleared(name string) bool {
	switch name {
	case dsse.EdgeStatement:
		return m.clearedstatement
	case dsse.EdgeSignatures:
		return m.clearedsignatures
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DsseMutation) ClearEdge(name string) error {
	switch name {
	case dsse.EdgeStatement:
		m.ClearStatement()
		return nil
	}
	return fmt.Errorf("unknown Dsse unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DsseMutation) ResetEdge(name string) error {
	switch name {
	case dsse.EdgeStatement:
		m.ResetStatement()
		return nil
	case dsse.EdgeSignatures:
		m.ResetSignatures()
		return nil
	}
	return fmt.Errorf("unknown Dsse edge %s", name)
}

// SignatureMutation represents an operation that mutates the Signature nodes in the graph.
type SignatureMutation struct {
	config
	op            Op
	typ           string
	id            *int
	key_id        *string
	signature     *string
	clearedFields map[string]struct{}
	dsse          *int
	cleareddsse   bool
	done          bool
	oldValue      func(context.Context) (*Signature, error)
	predicates    []predicate.Signature
}

var _ ent.Mutation = (*SignatureMutation)(nil)

// signatureOption allows management of the mutation configuration using functional options.
type signatureOption func(*SignatureMutation)

// newSignatureMutation creates new mutation for the Signature entity.
func newSignatureMutation(c config, op Op, opts ...signatureOption) *SignatureMutation {
	m := &SignatureMutation{
		config:        c,
		op:            op,
		typ:           TypeSignature,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSignatureID sets the ID field of the mutation.
func withSignatureID(id int) signatureOption {
	return func(m *SignatureMutation) {
		var (
			err   error
			once  sync.Once
			value *Signature
		)
		m.oldValue = func(ctx context.Context) (*Signature, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Signature.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSignature sets the old Signature of the mutation.
func withSignature(node *Signature) signatureOption {
	return func(m *SignatureMutation) {
		m.oldValue = func(context.Context) (*Signature, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SignatureMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SignatureMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SignatureMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SignatureMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Signature.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetKeyID sets the "key_id" field.
func (m *SignatureMutation) SetKeyID(s string) {
	m.key_id = &s
}

// KeyID returns the value of the "key_id" field in the mutation.
func (m *SignatureMutation) KeyID() (r string, exists bool) {
	v := m.key_id
	if v == nil {
		return
	}
	return *v, true
}

// OldKeyID returns the old "key_id" field's value of the Signature entity.
// If the Signature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SignatureMutation) OldKeyID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKeyID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKeyID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKeyID: %w", err)
	}
	return oldValue.KeyID, nil
}

// ResetKeyID resets all changes to the "key_id" field.
func (m *SignatureMutation) ResetKeyID() {
	m.key_id = nil
}

// SetSignature sets the "signature" field.
func (m *SignatureMutation) SetSignature(s string) {
	m.signature = &s
}

// Signature returns the value of the "signature" field in the mutation.
func (m *SignatureMutation) Signature() (r string, exists bool) {
	v := m.signature
	if v == nil {
		return
	}
	return *v, true
}

// OldSignature returns the old "signature" field's value of the Signature entity.
// If the Signature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SignatureMutation) OldSignature(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSignature is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSignature requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSignature: %w", err)
	}
	return oldValue.Signature, nil
}

// ResetSignature resets all changes to the "signature" field.
func (m *SignatureMutation) ResetSignature() {
	m.signature = nil
}

// SetDsseID sets the "dsse" edge to the Dsse entity by id.
func (m *SignatureMutation) SetDsseID(id int) {
	m.dsse = &id
}

// ClearDsse clears the "dsse" edge to the Dsse entity.
func (m *SignatureMutation) ClearDsse() {
	m.cleareddsse = true
}

// DsseCleared reports if the "dsse" edge to the Dsse entity was cleared.
func (m *SignatureMutation) DsseCleared() bool {
	return m.cleareddsse
}

// DsseID returns the "dsse" edge ID in the mutation.
func (m *SignatureMutation) DsseID() (id int, exists bool) {
	if m.dsse != nil {
		return *m.dsse, true
	}
	return
}

// DsseIDs returns the "dsse" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DsseID instead. It exists only for internal usage by the builders.
func (m *SignatureMutation) DsseIDs() (ids []int) {
	if id := m.dsse; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDsse resets all changes to the "dsse" edge.
func (m *SignatureMutation) ResetDsse() {
	m.dsse = nil
	m.cleareddsse = false
}

// Where appends a list predicates to the SignatureMutation builder.
func (m *SignatureMutation) Where(ps ...predicate.Signature) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SignatureMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Signature).
func (m *SignatureMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SignatureMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.key_id != nil {
		fields = append(fields, signature.FieldKeyID)
	}
	if m.signature != nil {
		fields = append(fields, signature.FieldSignature)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SignatureMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case signature.FieldKeyID:
		return m.KeyID()
	case signature.FieldSignature:
		return m.Signature()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SignatureMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case signature.FieldKeyID:
		return m.OldKeyID(ctx)
	case signature.FieldSignature:
		return m.OldSignature(ctx)
	}
	return nil, fmt.Errorf("unknown Signature field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SignatureMutation) SetField(name string, value ent.Value) error {
	switch name {
	case signature.FieldKeyID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKeyID(v)
		return nil
	case signature.FieldSignature:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSignature(v)
		return nil
	}
	return fmt.Errorf("unknown Signature field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SignatureMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SignatureMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SignatureMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Signature numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SignatureMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SignatureMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SignatureMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Signature nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SignatureMutation) ResetField(name string) error {
	switch name {
	case signature.FieldKeyID:
		m.ResetKeyID()
		return nil
	case signature.FieldSignature:
		m.ResetSignature()
		return nil
	}
	return fmt.Errorf("unknown Signature field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SignatureMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.dsse != nil {
		edges = append(edges, signature.EdgeDsse)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SignatureMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case signature.EdgeDsse:
		if id := m.dsse; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SignatureMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SignatureMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SignatureMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareddsse {
		edges = append(edges, signature.EdgeDsse)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SignatureMutation) EdgeCleared(name string) bool {
	switch name {
	case signature.EdgeDsse:
		return m.cleareddsse
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SignatureMutation) ClearEdge(name string) error {
	switch name {
	case signature.EdgeDsse:
		m.ClearDsse()
		return nil
	}
	return fmt.Errorf("unknown Signature unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SignatureMutation) ResetEdge(name string) error {
	switch name {
	case signature.EdgeDsse:
		m.ResetDsse()
		return nil
	}
	return fmt.Errorf("unknown Signature edge %s", name)
}

// StatementMutation represents an operation that mutates the Statement nodes in the graph.
type StatementMutation struct {
	config
	op                             Op
	typ                            string
	id                             *int
	predicate                      *string
	clearedFields                  map[string]struct{}
	subjects                       map[int]struct{}
	removedsubjects                map[int]struct{}
	clearedsubjects                bool
	attestation_collections        *int
	clearedattestation_collections bool
	dsse                           map[int]struct{}
	removeddsse                    map[int]struct{}
	cleareddsse                    bool
	done                           bool
	oldValue                       func(context.Context) (*Statement, error)
	predicates                     []predicate.Statement
}

var _ ent.Mutation = (*StatementMutation)(nil)

// statementOption allows management of the mutation configuration using functional options.
type statementOption func(*StatementMutation)

// newStatementMutation creates new mutation for the Statement entity.
func newStatementMutation(c config, op Op, opts ...statementOption) *StatementMutation {
	m := &StatementMutation{
		config:        c,
		op:            op,
		typ:           TypeStatement,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStatementID sets the ID field of the mutation.
func withStatementID(id int) statementOption {
	return func(m *StatementMutation) {
		var (
			err   error
			once  sync.Once
			value *Statement
		)
		m.oldValue = func(ctx context.Context) (*Statement, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Statement.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStatement sets the old Statement of the mutation.
func withStatement(node *Statement) statementOption {
	return func(m *StatementMutation) {
		m.oldValue = func(context.Context) (*Statement, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StatementMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StatementMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StatementMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StatementMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Statement.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPredicate sets the "predicate" field.
func (m *StatementMutation) SetPredicate(s string) {
	m.predicate = &s
}

// Predicate returns the value of the "predicate" field in the mutation.
func (m *StatementMutation) Predicate() (r string, exists bool) {
	v := m.predicate
	if v == nil {
		return
	}
	return *v, true
}

// OldPredicate returns the old "predicate" field's value of the Statement entity.
// If the Statement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatementMutation) OldPredicate(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPredicate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPredicate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPredicate: %w", err)
	}
	return oldValue.Predicate, nil
}

// ResetPredicate resets all changes to the "predicate" field.
func (m *StatementMutation) ResetPredicate() {
	m.predicate = nil
}

// AddSubjectIDs adds the "subjects" edge to the Subject entity by ids.
func (m *StatementMutation) AddSubjectIDs(ids ...int) {
	if m.subjects == nil {
		m.subjects = make(map[int]struct{})
	}
	for i := range ids {
		m.subjects[ids[i]] = struct{}{}
	}
}

// ClearSubjects clears the "subjects" edge to the Subject entity.
func (m *StatementMutation) ClearSubjects() {
	m.clearedsubjects = true
}

// SubjectsCleared reports if the "subjects" edge to the Subject entity was cleared.
func (m *StatementMutation) SubjectsCleared() bool {
	return m.clearedsubjects
}

// RemoveSubjectIDs removes the "subjects" edge to the Subject entity by IDs.
func (m *StatementMutation) RemoveSubjectIDs(ids ...int) {
	if m.removedsubjects == nil {
		m.removedsubjects = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.subjects, ids[i])
		m.removedsubjects[ids[i]] = struct{}{}
	}
}

// RemovedSubjects returns the removed IDs of the "subjects" edge to the Subject entity.
func (m *StatementMutation) RemovedSubjectsIDs() (ids []int) {
	for id := range m.removedsubjects {
		ids = append(ids, id)
	}
	return
}

// SubjectsIDs returns the "subjects" edge IDs in the mutation.
func (m *StatementMutation) SubjectsIDs() (ids []int) {
	for id := range m.subjects {
		ids = append(ids, id)
	}
	return
}

// ResetSubjects resets all changes to the "subjects" edge.
func (m *StatementMutation) ResetSubjects() {
	m.subjects = nil
	m.clearedsubjects = false
	m.removedsubjects = nil
}

// SetAttestationCollectionsID sets the "attestation_collections" edge to the AttestationCollection entity by id.
func (m *StatementMutation) SetAttestationCollectionsID(id int) {
	m.attestation_collections = &id
}

// ClearAttestationCollections clears the "attestation_collections" edge to the AttestationCollection entity.
func (m *StatementMutation) ClearAttestationCollections() {
	m.clearedattestation_collections = true
}

// AttestationCollectionsCleared reports if the "attestation_collections" edge to the AttestationCollection entity was cleared.
func (m *StatementMutation) AttestationCollectionsCleared() bool {
	return m.clearedattestation_collections
}

// AttestationCollectionsID returns the "attestation_collections" edge ID in the mutation.
func (m *StatementMutation) AttestationCollectionsID() (id int, exists bool) {
	if m.attestation_collections != nil {
		return *m.attestation_collections, true
	}
	return
}

// AttestationCollectionsIDs returns the "attestation_collections" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AttestationCollectionsID instead. It exists only for internal usage by the builders.
func (m *StatementMutation) AttestationCollectionsIDs() (ids []int) {
	if id := m.attestation_collections; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAttestationCollections resets all changes to the "attestation_collections" edge.
func (m *StatementMutation) ResetAttestationCollections() {
	m.attestation_collections = nil
	m.clearedattestation_collections = false
}

// AddDsseIDs adds the "dsse" edge to the Dsse entity by ids.
func (m *StatementMutation) AddDsseIDs(ids ...int) {
	if m.dsse == nil {
		m.dsse = make(map[int]struct{})
	}
	for i := range ids {
		m.dsse[ids[i]] = struct{}{}
	}
}

// ClearDsse clears the "dsse" edge to the Dsse entity.
func (m *StatementMutation) ClearDsse() {
	m.cleareddsse = true
}

// DsseCleared reports if the "dsse" edge to the Dsse entity was cleared.
func (m *StatementMutation) DsseCleared() bool {
	return m.cleareddsse
}

// RemoveDsseIDs removes the "dsse" edge to the Dsse entity by IDs.
func (m *StatementMutation) RemoveDsseIDs(ids ...int) {
	if m.removeddsse == nil {
		m.removeddsse = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.dsse, ids[i])
		m.removeddsse[ids[i]] = struct{}{}
	}
}

// RemovedDsse returns the removed IDs of the "dsse" edge to the Dsse entity.
func (m *StatementMutation) RemovedDsseIDs() (ids []int) {
	for id := range m.removeddsse {
		ids = append(ids, id)
	}
	return
}

// DsseIDs returns the "dsse" edge IDs in the mutation.
func (m *StatementMutation) DsseIDs() (ids []int) {
	for id := range m.dsse {
		ids = append(ids, id)
	}
	return
}

// ResetDsse resets all changes to the "dsse" edge.
func (m *StatementMutation) ResetDsse() {
	m.dsse = nil
	m.cleareddsse = false
	m.removeddsse = nil
}

// Where appends a list predicates to the StatementMutation builder.
func (m *StatementMutation) Where(ps ...predicate.Statement) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *StatementMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Statement).
func (m *StatementMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StatementMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.predicate != nil {
		fields = append(fields, statement.FieldPredicate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StatementMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case statement.FieldPredicate:
		return m.Predicate()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StatementMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case statement.FieldPredicate:
		return m.OldPredicate(ctx)
	}
	return nil, fmt.Errorf("unknown Statement field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StatementMutation) SetField(name string, value ent.Value) error {
	switch name {
	case statement.FieldPredicate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPredicate(v)
		return nil
	}
	return fmt.Errorf("unknown Statement field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StatementMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StatementMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StatementMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Statement numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StatementMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StatementMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StatementMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Statement nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StatementMutation) ResetField(name string) error {
	switch name {
	case statement.FieldPredicate:
		m.ResetPredicate()
		return nil
	}
	return fmt.Errorf("unknown Statement field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StatementMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.subjects != nil {
		edges = append(edges, statement.EdgeSubjects)
	}
	if m.attestation_collections != nil {
		edges = append(edges, statement.EdgeAttestationCollections)
	}
	if m.dsse != nil {
		edges = append(edges, statement.EdgeDsse)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StatementMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case statement.EdgeSubjects:
		ids := make([]ent.Value, 0, len(m.subjects))
		for id := range m.subjects {
			ids = append(ids, id)
		}
		return ids
	case statement.EdgeAttestationCollections:
		if id := m.attestation_collections; id != nil {
			return []ent.Value{*id}
		}
	case statement.EdgeDsse:
		ids := make([]ent.Value, 0, len(m.dsse))
		for id := range m.dsse {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StatementMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedsubjects != nil {
		edges = append(edges, statement.EdgeSubjects)
	}
	if m.removeddsse != nil {
		edges = append(edges, statement.EdgeDsse)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StatementMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case statement.EdgeSubjects:
		ids := make([]ent.Value, 0, len(m.removedsubjects))
		for id := range m.removedsubjects {
			ids = append(ids, id)
		}
		return ids
	case statement.EdgeDsse:
		ids := make([]ent.Value, 0, len(m.removeddsse))
		for id := range m.removeddsse {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StatementMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedsubjects {
		edges = append(edges, statement.EdgeSubjects)
	}
	if m.clearedattestation_collections {
		edges = append(edges, statement.EdgeAttestationCollections)
	}
	if m.cleareddsse {
		edges = append(edges, statement.EdgeDsse)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StatementMutation) EdgeCleared(name string) bool {
	switch name {
	case statement.EdgeSubjects:
		return m.clearedsubjects
	case statement.EdgeAttestationCollections:
		return m.clearedattestation_collections
	case statement.EdgeDsse:
		return m.cleareddsse
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StatementMutation) ClearEdge(name string) error {
	switch name {
	case statement.EdgeAttestationCollections:
		m.ClearAttestationCollections()
		return nil
	}
	return fmt.Errorf("unknown Statement unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StatementMutation) ResetEdge(name string) error {
	switch name {
	case statement.EdgeSubjects:
		m.ResetSubjects()
		return nil
	case statement.EdgeAttestationCollections:
		m.ResetAttestationCollections()
		return nil
	case statement.EdgeDsse:
		m.ResetDsse()
		return nil
	}
	return fmt.Errorf("unknown Statement edge %s", name)
}

// SubjectMutation represents an operation that mutates the Subject nodes in the graph.
type SubjectMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	clearedFields    map[string]struct{}
	digests          map[int]struct{}
	removeddigests   map[int]struct{}
	cleareddigests   bool
	statement        *int
	clearedstatement bool
	done             bool
	oldValue         func(context.Context) (*Subject, error)
	predicates       []predicate.Subject
}

var _ ent.Mutation = (*SubjectMutation)(nil)

// subjectOption allows management of the mutation configuration using functional options.
type subjectOption func(*SubjectMutation)

// newSubjectMutation creates new mutation for the Subject entity.
func newSubjectMutation(c config, op Op, opts ...subjectOption) *SubjectMutation {
	m := &SubjectMutation{
		config:        c,
		op:            op,
		typ:           TypeSubject,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSubjectID sets the ID field of the mutation.
func withSubjectID(id int) subjectOption {
	return func(m *SubjectMutation) {
		var (
			err   error
			once  sync.Once
			value *Subject
		)
		m.oldValue = func(ctx context.Context) (*Subject, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Subject.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSubject sets the old Subject of the mutation.
func withSubject(node *Subject) subjectOption {
	return func(m *SubjectMutation) {
		m.oldValue = func(context.Context) (*Subject, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SubjectMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SubjectMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SubjectMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SubjectMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Subject.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *SubjectMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SubjectMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Subject entity.
// If the Subject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubjectMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SubjectMutation) ResetName() {
	m.name = nil
}

// AddDigestIDs adds the "digests" edge to the Digest entity by ids.
func (m *SubjectMutation) AddDigestIDs(ids ...int) {
	if m.digests == nil {
		m.digests = make(map[int]struct{})
	}
	for i := range ids {
		m.digests[ids[i]] = struct{}{}
	}
}

// ClearDigests clears the "digests" edge to the Digest entity.
func (m *SubjectMutation) ClearDigests() {
	m.cleareddigests = true
}

// DigestsCleared reports if the "digests" edge to the Digest entity was cleared.
func (m *SubjectMutation) DigestsCleared() bool {
	return m.cleareddigests
}

// RemoveDigestIDs removes the "digests" edge to the Digest entity by IDs.
func (m *SubjectMutation) RemoveDigestIDs(ids ...int) {
	if m.removeddigests == nil {
		m.removeddigests = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.digests, ids[i])
		m.removeddigests[ids[i]] = struct{}{}
	}
}

// RemovedDigests returns the removed IDs of the "digests" edge to the Digest entity.
func (m *SubjectMutation) RemovedDigestsIDs() (ids []int) {
	for id := range m.removeddigests {
		ids = append(ids, id)
	}
	return
}

// DigestsIDs returns the "digests" edge IDs in the mutation.
func (m *SubjectMutation) DigestsIDs() (ids []int) {
	for id := range m.digests {
		ids = append(ids, id)
	}
	return
}

// ResetDigests resets all changes to the "digests" edge.
func (m *SubjectMutation) ResetDigests() {
	m.digests = nil
	m.cleareddigests = false
	m.removeddigests = nil
}

// SetStatementID sets the "statement" edge to the Statement entity by id.
func (m *SubjectMutation) SetStatementID(id int) {
	m.statement = &id
}

// ClearStatement clears the "statement" edge to the Statement entity.
func (m *SubjectMutation) ClearStatement() {
	m.clearedstatement = true
}

// StatementCleared reports if the "statement" edge to the Statement entity was cleared.
func (m *SubjectMutation) StatementCleared() bool {
	return m.clearedstatement
}

// StatementID returns the "statement" edge ID in the mutation.
func (m *SubjectMutation) StatementID() (id int, exists bool) {
	if m.statement != nil {
		return *m.statement, true
	}
	return
}

// StatementIDs returns the "statement" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StatementID instead. It exists only for internal usage by the builders.
func (m *SubjectMutation) StatementIDs() (ids []int) {
	if id := m.statement; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStatement resets all changes to the "statement" edge.
func (m *SubjectMutation) ResetStatement() {
	m.statement = nil
	m.clearedstatement = false
}

// Where appends a list predicates to the SubjectMutation builder.
func (m *SubjectMutation) Where(ps ...predicate.Subject) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SubjectMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Subject).
func (m *SubjectMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SubjectMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, subject.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SubjectMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case subject.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SubjectMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case subject.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Subject field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubjectMutation) SetField(name string, value ent.Value) error {
	switch name {
	case subject.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Subject field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SubjectMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SubjectMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubjectMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Subject numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SubjectMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SubjectMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SubjectMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Subject nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SubjectMutation) ResetField(name string) error {
	switch name {
	case subject.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Subject field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SubjectMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.digests != nil {
		edges = append(edges, subject.EdgeDigests)
	}
	if m.statement != nil {
		edges = append(edges, subject.EdgeStatement)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SubjectMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case subject.EdgeDigests:
		ids := make([]ent.Value, 0, len(m.digests))
		for id := range m.digests {
			ids = append(ids, id)
		}
		return ids
	case subject.EdgeStatement:
		if id := m.statement; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SubjectMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removeddigests != nil {
		edges = append(edges, subject.EdgeDigests)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SubjectMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case subject.EdgeDigests:
		ids := make([]ent.Value, 0, len(m.removeddigests))
		for id := range m.removeddigests {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SubjectMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareddigests {
		edges = append(edges, subject.EdgeDigests)
	}
	if m.clearedstatement {
		edges = append(edges, subject.EdgeStatement)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SubjectMutation) EdgeCleared(name string) bool {
	switch name {
	case subject.EdgeDigests:
		return m.cleareddigests
	case subject.EdgeStatement:
		return m.clearedstatement
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SubjectMutation) ClearEdge(name string) error {
	switch name {
	case subject.EdgeStatement:
		m.ClearStatement()
		return nil
	}
	return fmt.Errorf("unknown Subject unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SubjectMutation) ResetEdge(name string) error {
	switch name {
	case subject.EdgeDigests:
		m.ResetDigests()
		return nil
	case subject.EdgeStatement:
		m.ResetStatement()
		return nil
	}
	return fmt.Errorf("unknown Subject edge %s", name)
}
