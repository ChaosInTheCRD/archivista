// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/testifysec/archivist/ent/dssesignature"
)

// DsseSignature is the model entity for the DsseSignature schema.
type DsseSignature struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DsseSignature) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case dssesignature.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DsseSignature", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DsseSignature fields.
func (ds *DsseSignature) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dssesignature.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ds.ID = int(value.Int64)
		}
	}
	return nil
}

// Update returns a builder for updating this DsseSignature.
// Note that you need to call DsseSignature.Unwrap() before calling this method if this DsseSignature
// was returned from a transaction, and the transaction was committed or rolled back.
func (ds *DsseSignature) Update() *DsseSignatureUpdateOne {
	return (&DsseSignatureClient{config: ds.config}).UpdateOne(ds)
}

// Unwrap unwraps the DsseSignature entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ds *DsseSignature) Unwrap() *DsseSignature {
	tx, ok := ds.config.driver.(*txDriver)
	if !ok {
		panic("ent: DsseSignature is not a transactional entity")
	}
	ds.config.driver = tx.drv
	return ds
}

// String implements the fmt.Stringer.
func (ds *DsseSignature) String() string {
	var builder strings.Builder
	builder.WriteString("DsseSignature(")
	builder.WriteString(fmt.Sprintf("id=%v", ds.ID))
	builder.WriteByte(')')
	return builder.String()
}

// DsseSignatures is a parsable slice of DsseSignature.
type DsseSignatures []*DsseSignature

func (ds DsseSignatures) config(cfg config) {
	for _i := range ds {
		ds[_i].config = cfg
	}
}
