// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/in-toto/archivista/ent/statement"
	"github.com/in-toto/archivista/ent/vexdocument"
	"github.com/in-toto/archivista/ent/vexstatement"
)

// VexDocument is the model entity for the VexDocument schema.
type VexDocument struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// VexID holds the value of the "vex_id" field.
	VexID string `json:"vex_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VexDocumentQuery when eager-loading is set.
	Edges                   VexDocumentEdges `json:"edges"`
	statement_vex_documents *int
	selectValues            sql.SelectValues
}

// VexDocumentEdges holds the relations/edges for other nodes in the graph.
type VexDocumentEdges struct {
	// VexStatements holds the value of the vex_statements edge.
	VexStatements *VexStatement `json:"vex_statements,omitempty"`
	// Statement holds the value of the statement edge.
	Statement *Statement `json:"statement,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// VexStatementsOrErr returns the VexStatements value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VexDocumentEdges) VexStatementsOrErr() (*VexStatement, error) {
	if e.VexStatements != nil {
		return e.VexStatements, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: vexstatement.Label}
	}
	return nil, &NotLoadedError{edge: "vex_statements"}
}

// StatementOrErr returns the Statement value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VexDocumentEdges) StatementOrErr() (*Statement, error) {
	if e.Statement != nil {
		return e.Statement, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: statement.Label}
	}
	return nil, &NotLoadedError{edge: "statement"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VexDocument) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case vexdocument.FieldID:
			values[i] = new(sql.NullInt64)
		case vexdocument.FieldVexID:
			values[i] = new(sql.NullString)
		case vexdocument.ForeignKeys[0]: // statement_vex_documents
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VexDocument fields.
func (vd *VexDocument) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vexdocument.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			vd.ID = int(value.Int64)
		case vexdocument.FieldVexID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vex_id", values[i])
			} else if value.Valid {
				vd.VexID = value.String
			}
		case vexdocument.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field statement_vex_documents", value)
			} else if value.Valid {
				vd.statement_vex_documents = new(int)
				*vd.statement_vex_documents = int(value.Int64)
			}
		default:
			vd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VexDocument.
// This includes values selected through modifiers, order, etc.
func (vd *VexDocument) Value(name string) (ent.Value, error) {
	return vd.selectValues.Get(name)
}

// QueryVexStatements queries the "vex_statements" edge of the VexDocument entity.
func (vd *VexDocument) QueryVexStatements() *VexStatementQuery {
	return NewVexDocumentClient(vd.config).QueryVexStatements(vd)
}

// QueryStatement queries the "statement" edge of the VexDocument entity.
func (vd *VexDocument) QueryStatement() *StatementQuery {
	return NewVexDocumentClient(vd.config).QueryStatement(vd)
}

// Update returns a builder for updating this VexDocument.
// Note that you need to call VexDocument.Unwrap() before calling this method if this VexDocument
// was returned from a transaction, and the transaction was committed or rolled back.
func (vd *VexDocument) Update() *VexDocumentUpdateOne {
	return NewVexDocumentClient(vd.config).UpdateOne(vd)
}

// Unwrap unwraps the VexDocument entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vd *VexDocument) Unwrap() *VexDocument {
	_tx, ok := vd.config.driver.(*txDriver)
	if !ok {
		panic("ent: VexDocument is not a transactional entity")
	}
	vd.config.driver = _tx.drv
	return vd
}

// String implements the fmt.Stringer.
func (vd *VexDocument) String() string {
	var builder strings.Builder
	builder.WriteString("VexDocument(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vd.ID))
	builder.WriteString("vex_id=")
	builder.WriteString(vd.VexID)
	builder.WriteByte(')')
	return builder.String()
}

// VexDocuments is a parsable slice of VexDocument.
type VexDocuments []*VexDocument
