// Code generated by ent, DO NOT EDIT.

package vexstatement

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the vexstatement type in the database.
	Label = "vex_statement"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVexID holds the string denoting the vex_id field in the database.
	FieldVexID = "vex_id"
	// EdgeVexDocument holds the string denoting the vex_document edge name in mutations.
	EdgeVexDocument = "vex_document"
	// Table holds the table name of the vexstatement in the database.
	Table = "vex_statements"
	// VexDocumentTable is the table that holds the vex_document relation/edge.
	VexDocumentTable = "vex_statements"
	// VexDocumentInverseTable is the table name for the VexDocument entity.
	// It exists in this package in order to avoid circular dependency with the "vexdocument" package.
	VexDocumentInverseTable = "vex_documents"
	// VexDocumentColumn is the table column denoting the vex_document relation/edge.
	VexDocumentColumn = "vex_document_vex_statements"
)

// Columns holds all SQL columns for vexstatement fields.
var Columns = []string{
	FieldID,
	FieldVexID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "vex_statements"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"vex_document_vex_statements",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// VexIDValidator is a validator for the "vex_id" field. It is called by the builders before save.
	VexIDValidator func(string) error
)

// OrderOption defines the ordering options for the VexStatement queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByVexID orders the results by the vex_id field.
func ByVexID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVexID, opts...).ToFunc()
}

// ByVexDocumentField orders the results by vex_document field.
func ByVexDocumentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVexDocumentStep(), sql.OrderByField(field, opts...))
	}
}
func newVexDocumentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VexDocumentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, VexDocumentTable, VexDocumentColumn),
	)
}
