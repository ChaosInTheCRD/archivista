// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/in-toto/archivista/ent/vexdocument"
	"github.com/in-toto/archivista/ent/vexstatement"
)

// VexStatementCreate is the builder for creating a VexStatement entity.
type VexStatementCreate struct {
	config
	mutation *VexStatementMutation
	hooks    []Hook
}

// SetVexID sets the "vex_id" field.
func (vsc *VexStatementCreate) SetVexID(s string) *VexStatementCreate {
	vsc.mutation.SetVexID(s)
	return vsc
}

// SetVexDocumentID sets the "vex_document" edge to the VexDocument entity by ID.
func (vsc *VexStatementCreate) SetVexDocumentID(id int) *VexStatementCreate {
	vsc.mutation.SetVexDocumentID(id)
	return vsc
}

// SetVexDocument sets the "vex_document" edge to the VexDocument entity.
func (vsc *VexStatementCreate) SetVexDocument(v *VexDocument) *VexStatementCreate {
	return vsc.SetVexDocumentID(v.ID)
}

// Mutation returns the VexStatementMutation object of the builder.
func (vsc *VexStatementCreate) Mutation() *VexStatementMutation {
	return vsc.mutation
}

// Save creates the VexStatement in the database.
func (vsc *VexStatementCreate) Save(ctx context.Context) (*VexStatement, error) {
	return withHooks(ctx, vsc.sqlSave, vsc.mutation, vsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vsc *VexStatementCreate) SaveX(ctx context.Context) *VexStatement {
	v, err := vsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vsc *VexStatementCreate) Exec(ctx context.Context) error {
	_, err := vsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vsc *VexStatementCreate) ExecX(ctx context.Context) {
	if err := vsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vsc *VexStatementCreate) check() error {
	if _, ok := vsc.mutation.VexID(); !ok {
		return &ValidationError{Name: "vex_id", err: errors.New(`ent: missing required field "VexStatement.vex_id"`)}
	}
	if v, ok := vsc.mutation.VexID(); ok {
		if err := vexstatement.VexIDValidator(v); err != nil {
			return &ValidationError{Name: "vex_id", err: fmt.Errorf(`ent: validator failed for field "VexStatement.vex_id": %w`, err)}
		}
	}
	if _, ok := vsc.mutation.VexDocumentID(); !ok {
		return &ValidationError{Name: "vex_document", err: errors.New(`ent: missing required edge "VexStatement.vex_document"`)}
	}
	return nil
}

func (vsc *VexStatementCreate) sqlSave(ctx context.Context) (*VexStatement, error) {
	if err := vsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	vsc.mutation.id = &_node.ID
	vsc.mutation.done = true
	return _node, nil
}

func (vsc *VexStatementCreate) createSpec() (*VexStatement, *sqlgraph.CreateSpec) {
	var (
		_node = &VexStatement{config: vsc.config}
		_spec = sqlgraph.NewCreateSpec(vexstatement.Table, sqlgraph.NewFieldSpec(vexstatement.FieldID, field.TypeInt))
	)
	if value, ok := vsc.mutation.VexID(); ok {
		_spec.SetField(vexstatement.FieldVexID, field.TypeString, value)
		_node.VexID = value
	}
	if nodes := vsc.mutation.VexDocumentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   vexstatement.VexDocumentTable,
			Columns: []string{vexstatement.VexDocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vexdocument.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.vex_document_vex_statements = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VexStatementCreateBulk is the builder for creating many VexStatement entities in bulk.
type VexStatementCreateBulk struct {
	config
	err      error
	builders []*VexStatementCreate
}

// Save creates the VexStatement entities in the database.
func (vscb *VexStatementCreateBulk) Save(ctx context.Context) ([]*VexStatement, error) {
	if vscb.err != nil {
		return nil, vscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vscb.builders))
	nodes := make([]*VexStatement, len(vscb.builders))
	mutators := make([]Mutator, len(vscb.builders))
	for i := range vscb.builders {
		func(i int, root context.Context) {
			builder := vscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VexStatementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vscb *VexStatementCreateBulk) SaveX(ctx context.Context) []*VexStatement {
	v, err := vscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vscb *VexStatementCreateBulk) Exec(ctx context.Context) error {
	_, err := vscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vscb *VexStatementCreateBulk) ExecX(ctx context.Context) {
	if err := vscb.Exec(ctx); err != nil {
		panic(err)
	}
}
