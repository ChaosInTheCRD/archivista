// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/in-toto/archivista/ent/predicate"
	"github.com/in-toto/archivista/ent/statement"
	"github.com/in-toto/archivista/ent/vexdocument"
	"github.com/in-toto/archivista/ent/vexstatement"
)

// VexDocumentUpdate is the builder for updating VexDocument entities.
type VexDocumentUpdate struct {
	config
	hooks    []Hook
	mutation *VexDocumentMutation
}

// Where appends a list predicates to the VexDocumentUpdate builder.
func (vdu *VexDocumentUpdate) Where(ps ...predicate.VexDocument) *VexDocumentUpdate {
	vdu.mutation.Where(ps...)
	return vdu
}

// SetVexID sets the "vex_id" field.
func (vdu *VexDocumentUpdate) SetVexID(s string) *VexDocumentUpdate {
	vdu.mutation.SetVexID(s)
	return vdu
}

// SetNillableVexID sets the "vex_id" field if the given value is not nil.
func (vdu *VexDocumentUpdate) SetNillableVexID(s *string) *VexDocumentUpdate {
	if s != nil {
		vdu.SetVexID(*s)
	}
	return vdu
}

// SetVexStatementsID sets the "vex_statements" edge to the VexStatement entity by ID.
func (vdu *VexDocumentUpdate) SetVexStatementsID(id int) *VexDocumentUpdate {
	vdu.mutation.SetVexStatementsID(id)
	return vdu
}

// SetNillableVexStatementsID sets the "vex_statements" edge to the VexStatement entity by ID if the given value is not nil.
func (vdu *VexDocumentUpdate) SetNillableVexStatementsID(id *int) *VexDocumentUpdate {
	if id != nil {
		vdu = vdu.SetVexStatementsID(*id)
	}
	return vdu
}

// SetVexStatements sets the "vex_statements" edge to the VexStatement entity.
func (vdu *VexDocumentUpdate) SetVexStatements(v *VexStatement) *VexDocumentUpdate {
	return vdu.SetVexStatementsID(v.ID)
}

// SetStatementID sets the "statement" edge to the Statement entity by ID.
func (vdu *VexDocumentUpdate) SetStatementID(id int) *VexDocumentUpdate {
	vdu.mutation.SetStatementID(id)
	return vdu
}

// SetStatement sets the "statement" edge to the Statement entity.
func (vdu *VexDocumentUpdate) SetStatement(s *Statement) *VexDocumentUpdate {
	return vdu.SetStatementID(s.ID)
}

// Mutation returns the VexDocumentMutation object of the builder.
func (vdu *VexDocumentUpdate) Mutation() *VexDocumentMutation {
	return vdu.mutation
}

// ClearVexStatements clears the "vex_statements" edge to the VexStatement entity.
func (vdu *VexDocumentUpdate) ClearVexStatements() *VexDocumentUpdate {
	vdu.mutation.ClearVexStatements()
	return vdu
}

// ClearStatement clears the "statement" edge to the Statement entity.
func (vdu *VexDocumentUpdate) ClearStatement() *VexDocumentUpdate {
	vdu.mutation.ClearStatement()
	return vdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vdu *VexDocumentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vdu.sqlSave, vdu.mutation, vdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vdu *VexDocumentUpdate) SaveX(ctx context.Context) int {
	affected, err := vdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vdu *VexDocumentUpdate) Exec(ctx context.Context) error {
	_, err := vdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vdu *VexDocumentUpdate) ExecX(ctx context.Context) {
	if err := vdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vdu *VexDocumentUpdate) check() error {
	if v, ok := vdu.mutation.VexID(); ok {
		if err := vexdocument.VexIDValidator(v); err != nil {
			return &ValidationError{Name: "vex_id", err: fmt.Errorf(`ent: validator failed for field "VexDocument.vex_id": %w`, err)}
		}
	}
	if _, ok := vdu.mutation.StatementID(); vdu.mutation.StatementCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "VexDocument.statement"`)
	}
	return nil
}

func (vdu *VexDocumentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(vexdocument.Table, vexdocument.Columns, sqlgraph.NewFieldSpec(vexdocument.FieldID, field.TypeInt))
	if ps := vdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vdu.mutation.VexID(); ok {
		_spec.SetField(vexdocument.FieldVexID, field.TypeString, value)
	}
	if vdu.mutation.VexStatementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   vexdocument.VexStatementsTable,
			Columns: []string{vexdocument.VexStatementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vexstatement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vdu.mutation.VexStatementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   vexdocument.VexStatementsTable,
			Columns: []string{vexdocument.VexStatementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vexstatement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vdu.mutation.StatementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   vexdocument.StatementTable,
			Columns: []string{vexdocument.StatementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vdu.mutation.StatementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   vexdocument.StatementTable,
			Columns: []string{vexdocument.StatementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vexdocument.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vdu.mutation.done = true
	return n, nil
}

// VexDocumentUpdateOne is the builder for updating a single VexDocument entity.
type VexDocumentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VexDocumentMutation
}

// SetVexID sets the "vex_id" field.
func (vduo *VexDocumentUpdateOne) SetVexID(s string) *VexDocumentUpdateOne {
	vduo.mutation.SetVexID(s)
	return vduo
}

// SetNillableVexID sets the "vex_id" field if the given value is not nil.
func (vduo *VexDocumentUpdateOne) SetNillableVexID(s *string) *VexDocumentUpdateOne {
	if s != nil {
		vduo.SetVexID(*s)
	}
	return vduo
}

// SetVexStatementsID sets the "vex_statements" edge to the VexStatement entity by ID.
func (vduo *VexDocumentUpdateOne) SetVexStatementsID(id int) *VexDocumentUpdateOne {
	vduo.mutation.SetVexStatementsID(id)
	return vduo
}

// SetNillableVexStatementsID sets the "vex_statements" edge to the VexStatement entity by ID if the given value is not nil.
func (vduo *VexDocumentUpdateOne) SetNillableVexStatementsID(id *int) *VexDocumentUpdateOne {
	if id != nil {
		vduo = vduo.SetVexStatementsID(*id)
	}
	return vduo
}

// SetVexStatements sets the "vex_statements" edge to the VexStatement entity.
func (vduo *VexDocumentUpdateOne) SetVexStatements(v *VexStatement) *VexDocumentUpdateOne {
	return vduo.SetVexStatementsID(v.ID)
}

// SetStatementID sets the "statement" edge to the Statement entity by ID.
func (vduo *VexDocumentUpdateOne) SetStatementID(id int) *VexDocumentUpdateOne {
	vduo.mutation.SetStatementID(id)
	return vduo
}

// SetStatement sets the "statement" edge to the Statement entity.
func (vduo *VexDocumentUpdateOne) SetStatement(s *Statement) *VexDocumentUpdateOne {
	return vduo.SetStatementID(s.ID)
}

// Mutation returns the VexDocumentMutation object of the builder.
func (vduo *VexDocumentUpdateOne) Mutation() *VexDocumentMutation {
	return vduo.mutation
}

// ClearVexStatements clears the "vex_statements" edge to the VexStatement entity.
func (vduo *VexDocumentUpdateOne) ClearVexStatements() *VexDocumentUpdateOne {
	vduo.mutation.ClearVexStatements()
	return vduo
}

// ClearStatement clears the "statement" edge to the Statement entity.
func (vduo *VexDocumentUpdateOne) ClearStatement() *VexDocumentUpdateOne {
	vduo.mutation.ClearStatement()
	return vduo
}

// Where appends a list predicates to the VexDocumentUpdate builder.
func (vduo *VexDocumentUpdateOne) Where(ps ...predicate.VexDocument) *VexDocumentUpdateOne {
	vduo.mutation.Where(ps...)
	return vduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vduo *VexDocumentUpdateOne) Select(field string, fields ...string) *VexDocumentUpdateOne {
	vduo.fields = append([]string{field}, fields...)
	return vduo
}

// Save executes the query and returns the updated VexDocument entity.
func (vduo *VexDocumentUpdateOne) Save(ctx context.Context) (*VexDocument, error) {
	return withHooks(ctx, vduo.sqlSave, vduo.mutation, vduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vduo *VexDocumentUpdateOne) SaveX(ctx context.Context) *VexDocument {
	node, err := vduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vduo *VexDocumentUpdateOne) Exec(ctx context.Context) error {
	_, err := vduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vduo *VexDocumentUpdateOne) ExecX(ctx context.Context) {
	if err := vduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vduo *VexDocumentUpdateOne) check() error {
	if v, ok := vduo.mutation.VexID(); ok {
		if err := vexdocument.VexIDValidator(v); err != nil {
			return &ValidationError{Name: "vex_id", err: fmt.Errorf(`ent: validator failed for field "VexDocument.vex_id": %w`, err)}
		}
	}
	if _, ok := vduo.mutation.StatementID(); vduo.mutation.StatementCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "VexDocument.statement"`)
	}
	return nil
}

func (vduo *VexDocumentUpdateOne) sqlSave(ctx context.Context) (_node *VexDocument, err error) {
	if err := vduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vexdocument.Table, vexdocument.Columns, sqlgraph.NewFieldSpec(vexdocument.FieldID, field.TypeInt))
	id, ok := vduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VexDocument.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vexdocument.FieldID)
		for _, f := range fields {
			if !vexdocument.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vexdocument.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vduo.mutation.VexID(); ok {
		_spec.SetField(vexdocument.FieldVexID, field.TypeString, value)
	}
	if vduo.mutation.VexStatementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   vexdocument.VexStatementsTable,
			Columns: []string{vexdocument.VexStatementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vexstatement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vduo.mutation.VexStatementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   vexdocument.VexStatementsTable,
			Columns: []string{vexdocument.VexStatementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vexstatement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vduo.mutation.StatementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   vexdocument.StatementTable,
			Columns: []string{vexdocument.StatementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vduo.mutation.StatementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   vexdocument.StatementTable,
			Columns: []string{vexdocument.StatementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &VexDocument{config: vduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vexdocument.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vduo.mutation.done = true
	return _node, nil
}
