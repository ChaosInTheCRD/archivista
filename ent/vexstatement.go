// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/in-toto/archivista/ent/vexdocument"
	"github.com/in-toto/archivista/ent/vexstatement"
)

// VexStatement is the model entity for the VexStatement schema.
type VexStatement struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// VexID holds the value of the "vex_id" field.
	VexID string `json:"vex_id,omitempty"`
	// VulnID holds the value of the "vuln_id" field.
	VulnID string `json:"vuln_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VexStatementQuery when eager-loading is set.
	Edges                       VexStatementEdges `json:"edges"`
	vex_document_vex_statements *int
	selectValues                sql.SelectValues
}

// VexStatementEdges holds the relations/edges for other nodes in the graph.
type VexStatementEdges struct {
	// VexDocument holds the value of the vex_document edge.
	VexDocument *VexDocument `json:"vex_document,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// VexDocumentOrErr returns the VexDocument value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VexStatementEdges) VexDocumentOrErr() (*VexDocument, error) {
	if e.VexDocument != nil {
		return e.VexDocument, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: vexdocument.Label}
	}
	return nil, &NotLoadedError{edge: "vex_document"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VexStatement) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case vexstatement.FieldID:
			values[i] = new(sql.NullInt64)
		case vexstatement.FieldVexID, vexstatement.FieldVulnID:
			values[i] = new(sql.NullString)
		case vexstatement.ForeignKeys[0]: // vex_document_vex_statements
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VexStatement fields.
func (vs *VexStatement) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vexstatement.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			vs.ID = int(value.Int64)
		case vexstatement.FieldVexID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vex_id", values[i])
			} else if value.Valid {
				vs.VexID = value.String
			}
		case vexstatement.FieldVulnID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vuln_id", values[i])
			} else if value.Valid {
				vs.VulnID = value.String
			}
		case vexstatement.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field vex_document_vex_statements", value)
			} else if value.Valid {
				vs.vex_document_vex_statements = new(int)
				*vs.vex_document_vex_statements = int(value.Int64)
			}
		default:
			vs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VexStatement.
// This includes values selected through modifiers, order, etc.
func (vs *VexStatement) Value(name string) (ent.Value, error) {
	return vs.selectValues.Get(name)
}

// QueryVexDocument queries the "vex_document" edge of the VexStatement entity.
func (vs *VexStatement) QueryVexDocument() *VexDocumentQuery {
	return NewVexStatementClient(vs.config).QueryVexDocument(vs)
}

// Update returns a builder for updating this VexStatement.
// Note that you need to call VexStatement.Unwrap() before calling this method if this VexStatement
// was returned from a transaction, and the transaction was committed or rolled back.
func (vs *VexStatement) Update() *VexStatementUpdateOne {
	return NewVexStatementClient(vs.config).UpdateOne(vs)
}

// Unwrap unwraps the VexStatement entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vs *VexStatement) Unwrap() *VexStatement {
	_tx, ok := vs.config.driver.(*txDriver)
	if !ok {
		panic("ent: VexStatement is not a transactional entity")
	}
	vs.config.driver = _tx.drv
	return vs
}

// String implements the fmt.Stringer.
func (vs *VexStatement) String() string {
	var builder strings.Builder
	builder.WriteString("VexStatement(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vs.ID))
	builder.WriteString("vex_id=")
	builder.WriteString(vs.VexID)
	builder.WriteString(", ")
	builder.WriteString("vuln_id=")
	builder.WriteString(vs.VulnID)
	builder.WriteByte(')')
	return builder.String()
}

// VexStatements is a parsable slice of VexStatement.
type VexStatements []*VexStatement
