// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/testifysec/archivist/ent/digest"
	"github.com/testifysec/archivist/ent/subject"
)

// DigestCreate is the builder for creating a Digest entity.
type DigestCreate struct {
	config
	mutation *DigestMutation
	hooks    []Hook
}

// SetAlgorithm sets the "algorithm" field.
func (dc *DigestCreate) SetAlgorithm(s string) *DigestCreate {
	dc.mutation.SetAlgorithm(s)
	return dc
}

// SetValue sets the "value" field.
func (dc *DigestCreate) SetValue(s string) *DigestCreate {
	dc.mutation.SetValue(s)
	return dc
}

// SetSubjectID sets the "subject" edge to the Subject entity by ID.
func (dc *DigestCreate) SetSubjectID(id int) *DigestCreate {
	dc.mutation.SetSubjectID(id)
	return dc
}

// SetNillableSubjectID sets the "subject" edge to the Subject entity by ID if the given value is not nil.
func (dc *DigestCreate) SetNillableSubjectID(id *int) *DigestCreate {
	if id != nil {
		dc = dc.SetSubjectID(*id)
	}
	return dc
}

// SetSubject sets the "subject" edge to the Subject entity.
func (dc *DigestCreate) SetSubject(s *Subject) *DigestCreate {
	return dc.SetSubjectID(s.ID)
}

// Mutation returns the DigestMutation object of the builder.
func (dc *DigestCreate) Mutation() *DigestMutation {
	return dc.mutation
}

// Save creates the Digest in the database.
func (dc *DigestCreate) Save(ctx context.Context) (*Digest, error) {
	var (
		err  error
		node *Digest
	)
	if len(dc.hooks) == 0 {
		if err = dc.check(); err != nil {
			return nil, err
		}
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DigestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dc.check(); err != nil {
				return nil, err
			}
			dc.mutation = mutation
			if node, err = dc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			if dc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DigestCreate) SaveX(ctx context.Context) *Digest {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DigestCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DigestCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DigestCreate) check() error {
	if _, ok := dc.mutation.Algorithm(); !ok {
		return &ValidationError{Name: "algorithm", err: errors.New(`ent: missing required field "Digest.algorithm"`)}
	}
	if v, ok := dc.mutation.Algorithm(); ok {
		if err := digest.AlgorithmValidator(v); err != nil {
			return &ValidationError{Name: "algorithm", err: fmt.Errorf(`ent: validator failed for field "Digest.algorithm": %w`, err)}
		}
	}
	if _, ok := dc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "Digest.value"`)}
	}
	if v, ok := dc.mutation.Value(); ok {
		if err := digest.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "Digest.value": %w`, err)}
		}
	}
	return nil
}

func (dc *DigestCreate) sqlSave(ctx context.Context) (*Digest, error) {
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (dc *DigestCreate) createSpec() (*Digest, *sqlgraph.CreateSpec) {
	var (
		_node = &Digest{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: digest.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: digest.FieldID,
			},
		}
	)
	if value, ok := dc.mutation.Algorithm(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: digest.FieldAlgorithm,
		})
		_node.Algorithm = value
	}
	if value, ok := dc.mutation.Value(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: digest.FieldValue,
		})
		_node.Value = value
	}
	if nodes := dc.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   digest.SubjectTable,
			Columns: []string{digest.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.subject_digests = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DigestCreateBulk is the builder for creating many Digest entities in bulk.
type DigestCreateBulk struct {
	config
	builders []*DigestCreate
}

// Save creates the Digest entities in the database.
func (dcb *DigestCreateBulk) Save(ctx context.Context) ([]*Digest, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Digest, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DigestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DigestCreateBulk) SaveX(ctx context.Context) []*Digest {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DigestCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DigestCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
