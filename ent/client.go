// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/testifysec/archivist/ent/migrate"

	"github.com/testifysec/archivist/ent/digest"
	"github.com/testifysec/archivist/ent/dsse"
	"github.com/testifysec/archivist/ent/dssesignature"
	"github.com/testifysec/archivist/ent/statement"
	"github.com/testifysec/archivist/ent/subject"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Digest is the client for interacting with the Digest builders.
	Digest *DigestClient
	// Dsse is the client for interacting with the Dsse builders.
	Dsse *DsseClient
	// DsseSignature is the client for interacting with the DsseSignature builders.
	DsseSignature *DsseSignatureClient
	// Statement is the client for interacting with the Statement builders.
	Statement *StatementClient
	// Subject is the client for interacting with the Subject builders.
	Subject *SubjectClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Digest = NewDigestClient(c.config)
	c.Dsse = NewDsseClient(c.config)
	c.DsseSignature = NewDsseSignatureClient(c.config)
	c.Statement = NewStatementClient(c.config)
	c.Subject = NewSubjectClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Digest:        NewDigestClient(cfg),
		Dsse:          NewDsseClient(cfg),
		DsseSignature: NewDsseSignatureClient(cfg),
		Statement:     NewStatementClient(cfg),
		Subject:       NewSubjectClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Digest:        NewDigestClient(cfg),
		Dsse:          NewDsseClient(cfg),
		DsseSignature: NewDsseSignatureClient(cfg),
		Statement:     NewStatementClient(cfg),
		Subject:       NewSubjectClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Digest.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Digest.Use(hooks...)
	c.Dsse.Use(hooks...)
	c.DsseSignature.Use(hooks...)
	c.Statement.Use(hooks...)
	c.Subject.Use(hooks...)
}

// DigestClient is a client for the Digest schema.
type DigestClient struct {
	config
}

// NewDigestClient returns a client for the Digest from the given config.
func NewDigestClient(c config) *DigestClient {
	return &DigestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `digest.Hooks(f(g(h())))`.
func (c *DigestClient) Use(hooks ...Hook) {
	c.hooks.Digest = append(c.hooks.Digest, hooks...)
}

// Create returns a create builder for Digest.
func (c *DigestClient) Create() *DigestCreate {
	mutation := newDigestMutation(c.config, OpCreate)
	return &DigestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Digest entities.
func (c *DigestClient) CreateBulk(builders ...*DigestCreate) *DigestCreateBulk {
	return &DigestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Digest.
func (c *DigestClient) Update() *DigestUpdate {
	mutation := newDigestMutation(c.config, OpUpdate)
	return &DigestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DigestClient) UpdateOne(d *Digest) *DigestUpdateOne {
	mutation := newDigestMutation(c.config, OpUpdateOne, withDigest(d))
	return &DigestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DigestClient) UpdateOneID(id int) *DigestUpdateOne {
	mutation := newDigestMutation(c.config, OpUpdateOne, withDigestID(id))
	return &DigestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Digest.
func (c *DigestClient) Delete() *DigestDelete {
	mutation := newDigestMutation(c.config, OpDelete)
	return &DigestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DigestClient) DeleteOne(d *Digest) *DigestDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DigestClient) DeleteOneID(id int) *DigestDeleteOne {
	builder := c.Delete().Where(digest.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DigestDeleteOne{builder}
}

// Query returns a query builder for Digest.
func (c *DigestClient) Query() *DigestQuery {
	return &DigestQuery{
		config: c.config,
	}
}

// Get returns a Digest entity by its id.
func (c *DigestClient) Get(ctx context.Context, id int) (*Digest, error) {
	return c.Query().Where(digest.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DigestClient) GetX(ctx context.Context, id int) *Digest {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySubject queries the subject edge of a Digest.
func (c *DigestClient) QuerySubject(d *Digest) *SubjectQuery {
	query := &SubjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(digest.Table, digest.FieldID, id),
			sqlgraph.To(subject.Table, subject.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, digest.SubjectTable, digest.SubjectColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DigestClient) Hooks() []Hook {
	return c.hooks.Digest
}

// DsseClient is a client for the Dsse schema.
type DsseClient struct {
	config
}

// NewDsseClient returns a client for the Dsse from the given config.
func NewDsseClient(c config) *DsseClient {
	return &DsseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dsse.Hooks(f(g(h())))`.
func (c *DsseClient) Use(hooks ...Hook) {
	c.hooks.Dsse = append(c.hooks.Dsse, hooks...)
}

// Create returns a create builder for Dsse.
func (c *DsseClient) Create() *DsseCreate {
	mutation := newDsseMutation(c.config, OpCreate)
	return &DsseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Dsse entities.
func (c *DsseClient) CreateBulk(builders ...*DsseCreate) *DsseCreateBulk {
	return &DsseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Dsse.
func (c *DsseClient) Update() *DsseUpdate {
	mutation := newDsseMutation(c.config, OpUpdate)
	return &DsseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DsseClient) UpdateOne(d *Dsse) *DsseUpdateOne {
	mutation := newDsseMutation(c.config, OpUpdateOne, withDsse(d))
	return &DsseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DsseClient) UpdateOneID(id int) *DsseUpdateOne {
	mutation := newDsseMutation(c.config, OpUpdateOne, withDsseID(id))
	return &DsseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Dsse.
func (c *DsseClient) Delete() *DsseDelete {
	mutation := newDsseMutation(c.config, OpDelete)
	return &DsseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DsseClient) DeleteOne(d *Dsse) *DsseDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DsseClient) DeleteOneID(id int) *DsseDeleteOne {
	builder := c.Delete().Where(dsse.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DsseDeleteOne{builder}
}

// Query returns a query builder for Dsse.
func (c *DsseClient) Query() *DsseQuery {
	return &DsseQuery{
		config: c.config,
	}
}

// Get returns a Dsse entity by its id.
func (c *DsseClient) Get(ctx context.Context, id int) (*Dsse, error) {
	return c.Query().Where(dsse.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DsseClient) GetX(ctx context.Context, id int) *Dsse {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStatement queries the statement edge of a Dsse.
func (c *DsseClient) QueryStatement(d *Dsse) *StatementQuery {
	query := &StatementQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dsse.Table, dsse.FieldID, id),
			sqlgraph.To(statement.Table, statement.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, dsse.StatementTable, dsse.StatementColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DsseClient) Hooks() []Hook {
	return c.hooks.Dsse
}

// DsseSignatureClient is a client for the DsseSignature schema.
type DsseSignatureClient struct {
	config
}

// NewDsseSignatureClient returns a client for the DsseSignature from the given config.
func NewDsseSignatureClient(c config) *DsseSignatureClient {
	return &DsseSignatureClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dssesignature.Hooks(f(g(h())))`.
func (c *DsseSignatureClient) Use(hooks ...Hook) {
	c.hooks.DsseSignature = append(c.hooks.DsseSignature, hooks...)
}

// Create returns a create builder for DsseSignature.
func (c *DsseSignatureClient) Create() *DsseSignatureCreate {
	mutation := newDsseSignatureMutation(c.config, OpCreate)
	return &DsseSignatureCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DsseSignature entities.
func (c *DsseSignatureClient) CreateBulk(builders ...*DsseSignatureCreate) *DsseSignatureCreateBulk {
	return &DsseSignatureCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DsseSignature.
func (c *DsseSignatureClient) Update() *DsseSignatureUpdate {
	mutation := newDsseSignatureMutation(c.config, OpUpdate)
	return &DsseSignatureUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DsseSignatureClient) UpdateOne(ds *DsseSignature) *DsseSignatureUpdateOne {
	mutation := newDsseSignatureMutation(c.config, OpUpdateOne, withDsseSignature(ds))
	return &DsseSignatureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DsseSignatureClient) UpdateOneID(id int) *DsseSignatureUpdateOne {
	mutation := newDsseSignatureMutation(c.config, OpUpdateOne, withDsseSignatureID(id))
	return &DsseSignatureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DsseSignature.
func (c *DsseSignatureClient) Delete() *DsseSignatureDelete {
	mutation := newDsseSignatureMutation(c.config, OpDelete)
	return &DsseSignatureDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DsseSignatureClient) DeleteOne(ds *DsseSignature) *DsseSignatureDeleteOne {
	return c.DeleteOneID(ds.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DsseSignatureClient) DeleteOneID(id int) *DsseSignatureDeleteOne {
	builder := c.Delete().Where(dssesignature.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DsseSignatureDeleteOne{builder}
}

// Query returns a query builder for DsseSignature.
func (c *DsseSignatureClient) Query() *DsseSignatureQuery {
	return &DsseSignatureQuery{
		config: c.config,
	}
}

// Get returns a DsseSignature entity by its id.
func (c *DsseSignatureClient) Get(ctx context.Context, id int) (*DsseSignature, error) {
	return c.Query().Where(dssesignature.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DsseSignatureClient) GetX(ctx context.Context, id int) *DsseSignature {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DsseSignatureClient) Hooks() []Hook {
	return c.hooks.DsseSignature
}

// StatementClient is a client for the Statement schema.
type StatementClient struct {
	config
}

// NewStatementClient returns a client for the Statement from the given config.
func NewStatementClient(c config) *StatementClient {
	return &StatementClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `statement.Hooks(f(g(h())))`.
func (c *StatementClient) Use(hooks ...Hook) {
	c.hooks.Statement = append(c.hooks.Statement, hooks...)
}

// Create returns a create builder for Statement.
func (c *StatementClient) Create() *StatementCreate {
	mutation := newStatementMutation(c.config, OpCreate)
	return &StatementCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Statement entities.
func (c *StatementClient) CreateBulk(builders ...*StatementCreate) *StatementCreateBulk {
	return &StatementCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Statement.
func (c *StatementClient) Update() *StatementUpdate {
	mutation := newStatementMutation(c.config, OpUpdate)
	return &StatementUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StatementClient) UpdateOne(s *Statement) *StatementUpdateOne {
	mutation := newStatementMutation(c.config, OpUpdateOne, withStatement(s))
	return &StatementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StatementClient) UpdateOneID(id int) *StatementUpdateOne {
	mutation := newStatementMutation(c.config, OpUpdateOne, withStatementID(id))
	return &StatementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Statement.
func (c *StatementClient) Delete() *StatementDelete {
	mutation := newStatementMutation(c.config, OpDelete)
	return &StatementDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StatementClient) DeleteOne(s *Statement) *StatementDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StatementClient) DeleteOneID(id int) *StatementDeleteOne {
	builder := c.Delete().Where(statement.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StatementDeleteOne{builder}
}

// Query returns a query builder for Statement.
func (c *StatementClient) Query() *StatementQuery {
	return &StatementQuery{
		config: c.config,
	}
}

// Get returns a Statement entity by its id.
func (c *StatementClient) Get(ctx context.Context, id int) (*Statement, error) {
	return c.Query().Where(statement.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StatementClient) GetX(ctx context.Context, id int) *Statement {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySubjects queries the subjects edge of a Statement.
func (c *StatementClient) QuerySubjects(s *Statement) *SubjectQuery {
	query := &SubjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statement.Table, statement.FieldID, id),
			sqlgraph.To(subject.Table, subject.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, statement.SubjectsTable, statement.SubjectsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDsse queries the dsse edge of a Statement.
func (c *StatementClient) QueryDsse(s *Statement) *DsseQuery {
	query := &DsseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statement.Table, statement.FieldID, id),
			sqlgraph.To(dsse.Table, dsse.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, statement.DsseTable, statement.DsseColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StatementClient) Hooks() []Hook {
	return c.hooks.Statement
}

// SubjectClient is a client for the Subject schema.
type SubjectClient struct {
	config
}

// NewSubjectClient returns a client for the Subject from the given config.
func NewSubjectClient(c config) *SubjectClient {
	return &SubjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subject.Hooks(f(g(h())))`.
func (c *SubjectClient) Use(hooks ...Hook) {
	c.hooks.Subject = append(c.hooks.Subject, hooks...)
}

// Create returns a create builder for Subject.
func (c *SubjectClient) Create() *SubjectCreate {
	mutation := newSubjectMutation(c.config, OpCreate)
	return &SubjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Subject entities.
func (c *SubjectClient) CreateBulk(builders ...*SubjectCreate) *SubjectCreateBulk {
	return &SubjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Subject.
func (c *SubjectClient) Update() *SubjectUpdate {
	mutation := newSubjectMutation(c.config, OpUpdate)
	return &SubjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubjectClient) UpdateOne(s *Subject) *SubjectUpdateOne {
	mutation := newSubjectMutation(c.config, OpUpdateOne, withSubject(s))
	return &SubjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubjectClient) UpdateOneID(id int) *SubjectUpdateOne {
	mutation := newSubjectMutation(c.config, OpUpdateOne, withSubjectID(id))
	return &SubjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Subject.
func (c *SubjectClient) Delete() *SubjectDelete {
	mutation := newSubjectMutation(c.config, OpDelete)
	return &SubjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SubjectClient) DeleteOne(s *Subject) *SubjectDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SubjectClient) DeleteOneID(id int) *SubjectDeleteOne {
	builder := c.Delete().Where(subject.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubjectDeleteOne{builder}
}

// Query returns a query builder for Subject.
func (c *SubjectClient) Query() *SubjectQuery {
	return &SubjectQuery{
		config: c.config,
	}
}

// Get returns a Subject entity by its id.
func (c *SubjectClient) Get(ctx context.Context, id int) (*Subject, error) {
	return c.Query().Where(subject.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubjectClient) GetX(ctx context.Context, id int) *Subject {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDigests queries the digests edge of a Subject.
func (c *SubjectClient) QueryDigests(s *Subject) *DigestQuery {
	query := &DigestQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subject.Table, subject.FieldID, id),
			sqlgraph.To(digest.Table, digest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subject.DigestsTable, subject.DigestsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatement queries the statement edge of a Subject.
func (c *SubjectClient) QueryStatement(s *Subject) *StatementQuery {
	query := &StatementQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subject.Table, subject.FieldID, id),
			sqlgraph.To(statement.Table, statement.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, subject.StatementTable, subject.StatementPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubjectClient) Hooks() []Hook {
	return c.hooks.Subject
}
