// Code generated by ent, DO NOT EDIT.

package vexdocument

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/in-toto/archivista/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.VexDocument {
	return predicate.VexDocument(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.VexDocument {
	return predicate.VexDocument(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.VexDocument {
	return predicate.VexDocument(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.VexDocument {
	return predicate.VexDocument(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.VexDocument {
	return predicate.VexDocument(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.VexDocument {
	return predicate.VexDocument(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.VexDocument {
	return predicate.VexDocument(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.VexDocument {
	return predicate.VexDocument(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.VexDocument {
	return predicate.VexDocument(sql.FieldLTE(FieldID, id))
}

// VexID applies equality check predicate on the "vex_id" field. It's identical to VexIDEQ.
func VexID(v string) predicate.VexDocument {
	return predicate.VexDocument(sql.FieldEQ(FieldVexID, v))
}

// VexIDEQ applies the EQ predicate on the "vex_id" field.
func VexIDEQ(v string) predicate.VexDocument {
	return predicate.VexDocument(sql.FieldEQ(FieldVexID, v))
}

// VexIDNEQ applies the NEQ predicate on the "vex_id" field.
func VexIDNEQ(v string) predicate.VexDocument {
	return predicate.VexDocument(sql.FieldNEQ(FieldVexID, v))
}

// VexIDIn applies the In predicate on the "vex_id" field.
func VexIDIn(vs ...string) predicate.VexDocument {
	return predicate.VexDocument(sql.FieldIn(FieldVexID, vs...))
}

// VexIDNotIn applies the NotIn predicate on the "vex_id" field.
func VexIDNotIn(vs ...string) predicate.VexDocument {
	return predicate.VexDocument(sql.FieldNotIn(FieldVexID, vs...))
}

// VexIDGT applies the GT predicate on the "vex_id" field.
func VexIDGT(v string) predicate.VexDocument {
	return predicate.VexDocument(sql.FieldGT(FieldVexID, v))
}

// VexIDGTE applies the GTE predicate on the "vex_id" field.
func VexIDGTE(v string) predicate.VexDocument {
	return predicate.VexDocument(sql.FieldGTE(FieldVexID, v))
}

// VexIDLT applies the LT predicate on the "vex_id" field.
func VexIDLT(v string) predicate.VexDocument {
	return predicate.VexDocument(sql.FieldLT(FieldVexID, v))
}

// VexIDLTE applies the LTE predicate on the "vex_id" field.
func VexIDLTE(v string) predicate.VexDocument {
	return predicate.VexDocument(sql.FieldLTE(FieldVexID, v))
}

// VexIDContains applies the Contains predicate on the "vex_id" field.
func VexIDContains(v string) predicate.VexDocument {
	return predicate.VexDocument(sql.FieldContains(FieldVexID, v))
}

// VexIDHasPrefix applies the HasPrefix predicate on the "vex_id" field.
func VexIDHasPrefix(v string) predicate.VexDocument {
	return predicate.VexDocument(sql.FieldHasPrefix(FieldVexID, v))
}

// VexIDHasSuffix applies the HasSuffix predicate on the "vex_id" field.
func VexIDHasSuffix(v string) predicate.VexDocument {
	return predicate.VexDocument(sql.FieldHasSuffix(FieldVexID, v))
}

// VexIDEqualFold applies the EqualFold predicate on the "vex_id" field.
func VexIDEqualFold(v string) predicate.VexDocument {
	return predicate.VexDocument(sql.FieldEqualFold(FieldVexID, v))
}

// VexIDContainsFold applies the ContainsFold predicate on the "vex_id" field.
func VexIDContainsFold(v string) predicate.VexDocument {
	return predicate.VexDocument(sql.FieldContainsFold(FieldVexID, v))
}

// HasVexStatements applies the HasEdge predicate on the "vex_statements" edge.
func HasVexStatements() predicate.VexDocument {
	return predicate.VexDocument(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, VexStatementsTable, VexStatementsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVexStatementsWith applies the HasEdge predicate on the "vex_statements" edge with a given conditions (other predicates).
func HasVexStatementsWith(preds ...predicate.VexStatement) predicate.VexDocument {
	return predicate.VexDocument(func(s *sql.Selector) {
		step := newVexStatementsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStatement applies the HasEdge predicate on the "statement" edge.
func HasStatement() predicate.VexDocument {
	return predicate.VexDocument(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, StatementTable, StatementColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatementWith applies the HasEdge predicate on the "statement" edge with a given conditions (other predicates).
func HasStatementWith(preds ...predicate.Statement) predicate.VexDocument {
	return predicate.VexDocument(func(s *sql.Selector) {
		step := newStatementStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.VexDocument) predicate.VexDocument {
	return predicate.VexDocument(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.VexDocument) predicate.VexDocument {
	return predicate.VexDocument(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.VexDocument) predicate.VexDocument {
	return predicate.VexDocument(sql.NotPredicates(p))
}
