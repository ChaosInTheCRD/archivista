// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/in-toto/archivista/ent/statement"
	"github.com/in-toto/archivista/ent/vexdocument"
	"github.com/in-toto/archivista/ent/vexstatement"
)

// VexDocumentCreate is the builder for creating a VexDocument entity.
type VexDocumentCreate struct {
	config
	mutation *VexDocumentMutation
	hooks    []Hook
}

// SetVexID sets the "vex_id" field.
func (vdc *VexDocumentCreate) SetVexID(s string) *VexDocumentCreate {
	vdc.mutation.SetVexID(s)
	return vdc
}

// SetVexStatementsID sets the "vex_statements" edge to the VexStatement entity by ID.
func (vdc *VexDocumentCreate) SetVexStatementsID(id int) *VexDocumentCreate {
	vdc.mutation.SetVexStatementsID(id)
	return vdc
}

// SetNillableVexStatementsID sets the "vex_statements" edge to the VexStatement entity by ID if the given value is not nil.
func (vdc *VexDocumentCreate) SetNillableVexStatementsID(id *int) *VexDocumentCreate {
	if id != nil {
		vdc = vdc.SetVexStatementsID(*id)
	}
	return vdc
}

// SetVexStatements sets the "vex_statements" edge to the VexStatement entity.
func (vdc *VexDocumentCreate) SetVexStatements(v *VexStatement) *VexDocumentCreate {
	return vdc.SetVexStatementsID(v.ID)
}

// SetStatementID sets the "statement" edge to the Statement entity by ID.
func (vdc *VexDocumentCreate) SetStatementID(id int) *VexDocumentCreate {
	vdc.mutation.SetStatementID(id)
	return vdc
}

// SetStatement sets the "statement" edge to the Statement entity.
func (vdc *VexDocumentCreate) SetStatement(s *Statement) *VexDocumentCreate {
	return vdc.SetStatementID(s.ID)
}

// Mutation returns the VexDocumentMutation object of the builder.
func (vdc *VexDocumentCreate) Mutation() *VexDocumentMutation {
	return vdc.mutation
}

// Save creates the VexDocument in the database.
func (vdc *VexDocumentCreate) Save(ctx context.Context) (*VexDocument, error) {
	return withHooks(ctx, vdc.sqlSave, vdc.mutation, vdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vdc *VexDocumentCreate) SaveX(ctx context.Context) *VexDocument {
	v, err := vdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vdc *VexDocumentCreate) Exec(ctx context.Context) error {
	_, err := vdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vdc *VexDocumentCreate) ExecX(ctx context.Context) {
	if err := vdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vdc *VexDocumentCreate) check() error {
	if _, ok := vdc.mutation.VexID(); !ok {
		return &ValidationError{Name: "vex_id", err: errors.New(`ent: missing required field "VexDocument.vex_id"`)}
	}
	if v, ok := vdc.mutation.VexID(); ok {
		if err := vexdocument.VexIDValidator(v); err != nil {
			return &ValidationError{Name: "vex_id", err: fmt.Errorf(`ent: validator failed for field "VexDocument.vex_id": %w`, err)}
		}
	}
	if _, ok := vdc.mutation.StatementID(); !ok {
		return &ValidationError{Name: "statement", err: errors.New(`ent: missing required edge "VexDocument.statement"`)}
	}
	return nil
}

func (vdc *VexDocumentCreate) sqlSave(ctx context.Context) (*VexDocument, error) {
	if err := vdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	vdc.mutation.id = &_node.ID
	vdc.mutation.done = true
	return _node, nil
}

func (vdc *VexDocumentCreate) createSpec() (*VexDocument, *sqlgraph.CreateSpec) {
	var (
		_node = &VexDocument{config: vdc.config}
		_spec = sqlgraph.NewCreateSpec(vexdocument.Table, sqlgraph.NewFieldSpec(vexdocument.FieldID, field.TypeInt))
	)
	if value, ok := vdc.mutation.VexID(); ok {
		_spec.SetField(vexdocument.FieldVexID, field.TypeString, value)
		_node.VexID = value
	}
	if nodes := vdc.mutation.VexStatementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   vexdocument.VexStatementsTable,
			Columns: []string{vexdocument.VexStatementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vexstatement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vdc.mutation.StatementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   vexdocument.StatementTable,
			Columns: []string{vexdocument.StatementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.statement_vex_documents = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VexDocumentCreateBulk is the builder for creating many VexDocument entities in bulk.
type VexDocumentCreateBulk struct {
	config
	err      error
	builders []*VexDocumentCreate
}

// Save creates the VexDocument entities in the database.
func (vdcb *VexDocumentCreateBulk) Save(ctx context.Context) ([]*VexDocument, error) {
	if vdcb.err != nil {
		return nil, vdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vdcb.builders))
	nodes := make([]*VexDocument, len(vdcb.builders))
	mutators := make([]Mutator, len(vdcb.builders))
	for i := range vdcb.builders {
		func(i int, root context.Context) {
			builder := vdcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VexDocumentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vdcb *VexDocumentCreateBulk) SaveX(ctx context.Context) []*VexDocument {
	v, err := vdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vdcb *VexDocumentCreateBulk) Exec(ctx context.Context) error {
	_, err := vdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vdcb *VexDocumentCreateBulk) ExecX(ctx context.Context) {
	if err := vdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
